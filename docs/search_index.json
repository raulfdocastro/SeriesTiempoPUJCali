[["propuesta.html", "Capítulo 1 Propuesta Bookdown Grupo 7 1.1 Tipo de datos 1.2 Importancia del pronóstico 1.3 Fuente de datos 1.4 Consideraciones finales", " Universidad Javeriana Cali Maestría en Ciencia de Datos Análisis de Series de Tiempo - 20241 - B M1U1 Actividad 1 - Propuesta Bookdown Joan Sebastián García Villa Laura Yohanna Bermúdez Murillo Raúl Fernando Castro Suárez Mayo 2024 Capítulo 1 Propuesta Bookdown Grupo 7 1.1 Tipo de datos En el presente proyecto se propone analizar datos meteorológicos, en particular los parámetros de precipitación y temperatura ambiente para Colombia. 1.2 Importancia del pronóstico La Organización Mundial de la Salud (OMS) han dejado claro que el cambio climático constituye una amenaza muy grave para la salud humana, afectando tanto a los sistemas naturales y humanos. Este fenómeno es un multiplicador de amenazas que podría revertir décadas de avances en salud. Últimamente se observan fenómenos meteorológicos y climáticos más frecuentes e intensos, como tormentas, calor extremo, sequías e incendios que aumentan el riesgo de mortalidad, enfermedades y emergencias de salud (OMS - Organización Mundial de la Salud 2021). La Organización Meteorológica Mundial (OMM) celebró este año del Día Meteorológico Mundial llamándonos a estar “a la vanguardia de la acción por el clima” lo cual le apunta a los Objetivos de Desarrollo Sostenible, en dónde es claro para la entidad que las predicciones climáticas y meteorológicas son cruciales para mejorar la producción alimentaria, así como gestionar la enfermedades sensibles al clima y generar sistemas de alertas tempranas (OMM - Organización Meteorológica Mundial 2024). 1.3 Fuente de datos En Colombia, el Instituto de Hidrología, Meteorología y Estudios Ambientales (IDEAM) es la institución de apoyo técnico y científico al Sistema Nacional Ambiental, que tiene como misión producir información confiable sobre el estado de los recursos naturales y el medio ambiente (IDEAM - Instituto de Hidrología, Meteorología y Estudios Ambientales 2024). El IDEAM cuenta con un Banco de Datos en línea (DHIME) (IDEAM - Instituto de Hidrología, Meteorología y Estudios Ambientales 2021) del cual se pueden descargar series de tiempo de los diferentes parámetros y variables que mide la entidad con sus estaciones hidrometeorológicas en los diferentes departamentos y municipios del país. De la misma manera, en la Plataforma Nacional de Datos Abiertos de Colombia (MINTIC - Ministerio de Tecnologías de la Información y las Comunicaciones 2024) se cuentan con conjuntos de datos (tanto del IDEAM, como de otras entidades) de precipitación y de temperatura para descargar o consumir por medio de API. A continuación se pueden apreciar pantallazos con una muestra de datos de temperatura obtenidos del IDEAM y de precipitación de Datos Abiertos: Figura 1.1: Muestra datos temperatura IDEAM Figura 1.2: Muestra datos precipitación Datos Abiertos 1.4 Consideraciones finales En la presente propuesta se han presentado fuentes confiables de datos para el proyecto y se ha descrito la importancia de las variables a analizar, especialmente en un contexto de cambio climático, por lo tanto, es claro que predecir o pronosticar series de tiempo como la precipitación y la temperatura en el país es relevante por su importancia en la salud; su impacto en otras áreas como la agricultura, la gestión de riesgos naturales (p.ej. incendios) e incluso para el turismo. Referencias ———. 2021. «Banco de Datos del IDEAM - DHIME». http://dhime.ideam.gov.co/atencionciudadano/. ———. 2024. «Acerca de la Entidad». http://www.ideam.gov.co/web/entidad/acerca-entidad. MINTIC - Ministerio de Tecnologías de la Información y las Comunicaciones. 2024. «Datos Abiertos Colombia». la plataforma de datos abiertos del gobierno colombiano. https://www.datos.gov.co/. OMM - Organización Meteorológica Mundial. 2024. «Día Meteorológico Mundial de 2024». Organización Meteorológica Mundial. https://wmo.int/es/site/dia-meteorologico-mundial-de-2024. OMS - Organización Mundial de la Salud. 2021. «Cambio climático». https://www.who.int/es/news-room/fact-sheets/detail/climate-change-and-health. "],["estructura-de-las-series-de-tiempo.html", "Capítulo 2 Estructura de las series de tiempo 2.1 Variables a analizar 2.2 Conjunto de datos 2.3 Series de tiempo 2.4 Datos faltantes 2.5 Análisis exploratorio 2.6 Observaciones finales", " Capítulo 2 Estructura de las series de tiempo En el presente capítulo se revisa la estructura de las series de tiempo por medio de un análisis exploratorio de los datos. 2.1 Variables a analizar Las variables a analizar en el proyecto son las siguientes: Temperatura máxima diaria Precipitación total diaria (automática) 2.2 Conjunto de datos Del Banco de Datos en línea DHIME (IDEAM - Instituto de Hidrología, Meteorología y Estudios Ambientales 2021) se descargaron los datasets disponibles de las variables anteriores para estaciones en las ciudades de Bogotá, Medellín y Valledupar con registros diarios entre los años 2018 al 2023. Las estaciones IDEAM seleccionadas para el estudio son las siguientes: Bogotá / BOG: UNIVERSIDAD NACIONAL [21205012] Medellín / MED: AEROPUERTO OLAYA HERRERA - AUT [27015330] Valledupar / VUP: AEROPUERTO ALFONSO LOPEZ - [28025502] Las estaciones en mención se escogieron por contar con la mayor cantidad de datos en el periodo seleccionado para el estudio. Para el análisis inicial se usarán las siguientes librerías: # Análisis datos library(dplyr) library(readr) library(tidyr) library(stats) # Series tiempo library(changepoint) #library(fGarch) library(forecast) library(lubridate) library(plotly) library(timsac) library(tseries) library(xts) library(zoo) # Visualización library(dygraphs) # library(kableExtra) library(ggplot2) library(ggfortify) library(quantmod) Se proceden a cargar / leer los zips / datasets descargados: # Datasets IDEAM zip_temp_max &lt;- &quot;data/DHIME-IDEAM_Temperatura máxima diaria_2018-2023.zip&quot; zip_rain &lt;- &quot;data/DHIME-IDEAM_Precipitación total diaria (automática)_2018-2023.zip&quot; # Dataframes df_temp_max &lt;- read_csv(unzip(zip_temp_max, files = &quot;excel.csv.csv&quot;), col_select = c(CodigoEstacion, Fecha, Valor)) df_rain &lt;- read_csv(unzip(zip_rain, files = &quot;excel.csv.csv&quot;), col_select = c(CodigoEstacion, Fecha, Valor)) # Conversión Fecha a Date df_temp_max$Fecha &lt;- as.Date(df_temp_max$Fecha) df_rain$Fecha &lt;- as.Date(df_rain$Fecha) # Descripción de los datos glimpse(df_temp_max) ## Rows: 2,769 ## Columns: 3 ## $ CodigoEstacion &lt;dbl&gt; 27015330, 27015330, 27015330, 27015330, 27015330, 27015… ## $ Fecha &lt;date&gt; 2018-01-01, 2018-01-02, 2018-01-03, 2018-01-04, 2018-0… ## $ Valor &lt;dbl&gt; 26.3, 25.6, 28.7, 27.4, 25.8, 28.0, 27.6, 28.2, 22.6, 2… str(df_temp_max) ## tibble [2,769 × 3] (S3: tbl_df/tbl/data.frame) ## $ CodigoEstacion: num [1:2769] 2.7e+07 2.7e+07 2.7e+07 2.7e+07 2.7e+07 ... ## $ Fecha : Date[1:2769], format: &quot;2018-01-01&quot; &quot;2018-01-02&quot; ... ## $ Valor : num [1:2769] 26.3 25.6 28.7 27.4 25.8 28 27.6 28.2 22.6 27.8 ... ## - attr(*, &quot;spec&quot;)= ## .. cols( ## .. CodigoEstacion = col_double(), ## .. NombreEstacion = col_skip(), ## .. Latitud = col_skip(), ## .. Longitud = col_skip(), ## .. Altitud = col_skip(), ## .. Categoria = col_skip(), ## .. Entidad = col_skip(), ## .. AreaOperativa = col_skip(), ## .. Departamento = col_skip(), ## .. Municipio = col_skip(), ## .. FechaInstalacion = col_skip(), ## .. FechaSuspension = col_skip(), ## .. IdParametro = col_skip(), ## .. Etiqueta = col_skip(), ## .. DescripcionSerie = col_skip(), ## .. Frecuencia = col_skip(), ## .. Fecha = col_datetime(format = &quot;&quot;), ## .. Valor = col_double(), ## .. Grado = col_skip(), ## .. Calificador = col_skip(), ## .. NivelAprobacion = col_skip() ## .. ) # Estaciones unique(df_temp_max$CodigoEstacion) ## [1] 27015330 21205012 28025502 unique(df_rain$CodigoEstacion) ## [1] 27015330 21205012 28025502 Se pasan las estaciones y sus datos a columnas: # Pivot df por estación df_temp_max_pivot &lt;- df_temp_max %&gt;% pivot_wider(names_from = CodigoEstacion, values_from = Valor, names_prefix = &quot;Est_&quot;) df_rain_pivot &lt;- df_rain %&gt;% pivot_wider(names_from = CodigoEstacion, values_from = Valor, names_prefix = &quot;Est_&quot;) # Encabezado datos head(df_temp_max_pivot) ## # A tibble: 6 × 4 ## Fecha Est_27015330 Est_21205012 Est_28025502 ## &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2018-01-01 26.3 NA 34.2 ## 2 2018-01-02 25.6 NA 32.3 ## 3 2018-01-03 28.7 NA 33.5 ## 4 2018-01-04 27.4 NA 33.4 ## 5 2018-01-05 25.8 NA 32.8 ## 6 2018-01-06 28 NA 34.2 head(df_rain_pivot) ## # A tibble: 6 × 4 ## Fecha Est_27015330 Est_21205012 Est_28025502 ## &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2018-01-01 0.012 13.8 0 ## 2 2018-01-02 26.3 0.1 28.0 ## 3 2018-01-03 4.77 2.2 1.15 ## 4 2018-01-04 7.23 0 0 ## 5 2018-01-05 3.17 17.1 13.2 ## 6 2018-01-06 4.86 0.3 0.01 2.3 Series de tiempo Se verifican que los registros tengan todos los días del periodo seleccionado en los dataframes y completan con un join para todo el periodo de ser necesario: # df días completos 2018-2023 dias_2018_2023 &lt;- data.frame(Fecha = seq.Date(from = as.Date(&quot;2018-01-01&quot;), to = as.Date(&quot;2023-12-31&quot;), by = &quot;day&quot;)) # Join días completos df_temp_max_na &lt;- left_join(dias_2018_2023, df_temp_max_pivot, by = &quot;Fecha&quot;) df_rain_na &lt;- left_join(dias_2018_2023, df_rain_pivot, by = &quot;Fecha&quot;) Como se cuentan con años bisiestos, se crean las series de tiempo con xts: # Creación series de tiempo con xts (más adecuada para datos diarios con años bisiestos / frecuencias variables que ts) df_temp_max_ts = xts(df_temp_max_na[,-1], order.by = df_temp_max_na$Fecha) df_rain_ts = xts(df_rain_na[,-1], order.by = df_rain_na$Fecha) # Dataframes xts head(df_temp_max_ts) ## Est_27015330 Est_21205012 Est_28025502 ## 2018-01-01 26.3 NA 34.2 ## 2018-01-02 25.6 NA 32.3 ## 2018-01-03 28.7 NA 33.5 ## 2018-01-04 27.4 NA 33.4 ## 2018-01-05 25.8 NA 32.8 ## 2018-01-06 28.0 NA 34.2 class(df_temp_max_ts) ## [1] &quot;xts&quot; &quot;zoo&quot; head(df_rain_ts) ## Est_27015330 Est_21205012 Est_28025502 ## 2018-01-01 0.012 13.8 0.00 ## 2018-01-02 26.304 0.1 27.97 ## 2018-01-03 4.774 2.2 1.15 ## 2018-01-04 7.233 0.0 0.00 ## 2018-01-05 3.169 17.1 13.21 ## 2018-01-06 4.862 0.3 0.01 class(df_rain_ts) ## [1] &quot;xts&quot; &quot;zoo&quot; Se realizan gráficas iniciales con autoplot y dygraph de las series de tiempo creadas: # Se cambian y ordenan nombres de estaciones por ciudades para mejor asociación / entendimiento colnames(df_temp_max_ts) &lt;- c(&quot;MED&quot;, &quot;BOG&quot;, &quot;VUP&quot;) df_temp_max_ts &lt;- df_temp_max_ts[, sort(names(df_temp_max_ts))] colnames(df_rain_ts) &lt;- c(&quot;MED&quot;, &quot;BOG&quot;, &quot;VUP&quot;) df_rain_ts &lt;- df_rain_ts[, sort(names(df_rain_ts))] # Gráficas series de tiempo autoplot(df_temp_max_ts, main=&quot;Temperatura máxima&quot;) ## Warning: Removed 325 rows containing missing values or values outside the ## scale range (`geom_line()`). dygraph(df_temp_max_ts, main=&quot;Temperatura máxima&quot;) %&gt;% dyAxis(&quot;x&quot;, label = &quot;Fecha&quot;) %&gt;% dyAxis(&quot;y&quot;, label = &quot;Temperatura (°C)&quot;) Se puede apreciar claramente en las gráficas anteriores que no se cuentan con datos de temperatura en diferentes periodos para las tres estaciones, especialmente en los años 2020 y 2021 (pandemia). # Series de tiempo precipitación autoplot(df_rain_ts, main=&quot;Precipitación acumulada&quot;) ## Warning: Removed 547 rows containing missing values or values outside the ## scale range (`geom_line()`). dygraph(df_rain_ts, main=&quot;Precipitación acumulada&quot;) %&gt;% dyAxis(&quot;x&quot;, label = &quot;Fecha&quot;) %&gt;% dyAxis(&quot;y&quot;, label = &quot;Precipitación (mm)&quot;) Se puede observar también que los registros de precipitación no tienen vacíos en pandemia, aunque en Valledupar (estación 28025502) se evidencian registros muy altos en marzo 2022 (mayores a 700 mm de lluvia) 2.4 Datos faltantes Como se puede apreciar en las gráficas anteriores, se presentan vacíos en las series; por lo que se procede a cuantificar los datos faltantes (NA) por cada estación / ciudad y variable. # Suma NA colSums(is.na(df_temp_max_ts)) ## BOG MED VUP ## 1794 640 1370 colSums(is.na(df_rain_ts)) ## BOG MED VUP ## 228 207 112 Tal como se había observado gráficamente, las series de tiempo cuentan con datos faltantes / vacíos, lo cual es notorio al especialmente para la temperatura máxima diaria en Bogotá y Valledupar. 2.5 Análisis exploratorio Se inicia el análisis exploratorio obteniendo realizando un resumen estadístico con summary para cada una de las variables y ciudades estudiadas. # Summary summary(df_temp_max_ts) ## Index BOG MED VUP ## Min. :2018-01-01 Min. :14.20 Min. :20.60 Min. :27.80 ## 1st Qu.:2019-07-02 1st Qu.:19.80 1st Qu.:26.80 1st Qu.:34.40 ## Median :2020-12-31 Median :20.70 Median :28.20 Median :35.60 ## Mean :2020-12-31 Mean :20.56 Mean :28.09 Mean :35.53 ## 3rd Qu.:2022-07-01 3rd Qu.:21.60 3rd Qu.:29.60 3rd Qu.:36.90 ## Max. :2023-12-31 Max. :24.50 Max. :33.60 Max. :40.60 ## NA&#39;s :1794 NA&#39;s :640 NA&#39;s :1370 summary(df_rain_ts) ## Index BOG MED VUP ## Min. :2018-01-01 Min. : 0.00 Min. : 0.0000 Min. : 0.00 ## 1st Qu.:2019-07-02 1st Qu.: 0.00 1st Qu.: 0.0000 1st Qu.: 0.00 ## Median :2020-12-31 Median : 0.10 Median : 0.0445 Median : 0.00 ## Mean :2020-12-31 Mean : 2.02 Mean : 3.1828 Mean : 12.62 ## 3rd Qu.:2022-07-01 3rd Qu.: 1.40 3rd Qu.: 2.4678 3rd Qu.: 0.01 ## Max. :2023-12-31 Max. :48.50 Max. :58.4830 Max. :720.00 ## NA&#39;s :228 NA&#39;s :207 NA&#39;s :112 Se confirma con summary la cantidad de NA’s estimados anteriormente, mientras que las temperaturas mínimas y medias corresponden al tipo de ciudad estudiada (Bogotá fría, Medellín templada y Valledupar caliente). La precipitación total diaria promedio es menor en Bogotá, seguida por Medellín y se cuadriplica en Valledupar (es necesario analizar los validez / atipicidad de los altos registros de marzo 2022 que pueden afectan la media obtenida para dicha ciudad). 2.5.1 Boxplots Una forma gráfica de apreciar el rango de las variables analizadas se puedo lograr realizando diagramas de cajas con boxplot: # Boxplots temperatura boxplot(df_temp_max_ts, col=c(&quot;lightblue&quot;, &quot;lightgreen&quot;, &quot;orange&quot;), bg = &quot;aliceblue&quot;, main=&quot;Temperatura máxima diaria&quot;, ylab=&quot;Temperatura [°C]&quot;, xlab=&quot;Ciudad&quot;) Lo anterior confirma nuevamente el comportamiento de temperaturas de las ciudades acorde a su zona climática. # Boxplots lluvia boxplot(df_rain_ts, col=c(&quot;lightblue&quot;, &quot;lightgreen&quot;, &quot;orange&quot;), bg = &quot;aliceblue&quot;, main=&quot;Precipitación total diaria&quot;, ylab=&quot;Lluvia [mm]&quot;, xlab=&quot;Ciudad&quot;) Aunque la mayoría de los registros de precipitación normalmente son ceros (días sin lluvia), en el diagrama de cajas anterior, se observa que la estación en Valledupar es la que más cuenta con datos por fuera del rango intercuartílico. 2.5.2 Histogramas A continuación de se generan histogramas para la temperatura máxima y la precipitación total diaria con ggplot: # Se convierte xts en df y se hace pivot para ggplot df_temp_max_ts_pivot&lt;- as.data.frame(df_temp_max_ts) df_temp_max_ts_pivot &lt;- pivot_longer(df_temp_max_ts_pivot, cols = c(BOG, MED, VUP), names_to = &quot;Ciudad&quot;, values_to = &quot;Temperatura&quot;) # Histogramas temperatura city_colors = c(&quot;BOG&quot; = &quot;lightblue&quot;, &quot;MED&quot; = &quot;lightgreen&quot;, &quot;VUP&quot;= &quot;orange&quot;) ggplot(df_temp_max_ts_pivot, aes(x = Temperatura, fill = Ciudad)) + geom_histogram(binwidth = 1, position = &quot;dodge&quot;) + scale_fill_manual(values = city_colors) + labs(title = &quot;Histograma de temperaturas máximas diarias por ciudad&quot;, x = &quot;Temperatura&quot;, y = &quot;Frecuencia&quot;, fill = &quot;Ciudad&quot;) + theme_minimal() ## Warning: Removed 3804 rows containing non-finite outside the scale range ## (`stat_bin()`). A pesar de los alta cantidad de registros NA, los histogramas de temperatura corresponden a lo esperado, encontrando las temperaturas máximas de Bogotá entre los 14 y 25 grados Celsius, los de Medellín entre 20 y 34 °C y Valledupar entre 28 y 40 °C, notándose que la mayor frecuencia de registros en cerca de 20, 28 y 35 °C respectivamente. # Dataframes lluvia pivot df_rain_ts_pivot&lt;- as.data.frame(df_rain_ts) df_rain_ts_pivot &lt;- pivot_longer(df_rain_ts_pivot, cols = c(BOG, MED, VUP), names_to = &quot;Ciudad&quot;, values_to = &quot;Lluvia&quot;) # Histograma lluvia ggplot(df_rain_ts_pivot, aes(x = Lluvia, fill = Ciudad)) + geom_histogram(binwidth = 20, position = &quot;dodge&quot;) + scale_fill_manual(values = city_colors) + labs(title = &quot;Histograma de precipitaciones totales diarias por ciudad&quot;, x = &quot;Lluvia&quot;, y = &quot;Frecuencia&quot;, fill = &quot;Ciudad&quot;) + theme_minimal() ## Warning: Removed 547 rows containing non-finite outside the scale range ## (`stat_bin()`). Como se puede observar en el histograma anterior, en el caso de la precipitación como era de esperar, la mayor frecuencia / conteo de registros se encuentra entre 0-20 mm de lluvia. 2.5.3 Análisis por años Para entender y explorar aun más los datos, se obtienen los estadísticos descriptivos esta vez para cada año para cada una de las variables en el estudio. # Dataframe años temperatura df_temp_max_ts_year &lt;- df_temp_max_ts df_temp_max_ts_year$year &lt;- year(index(df_temp_max_ts_year)) df_temp_max_ts_year &lt;- as.data.frame(df_temp_max_ts_year) # Dataframe años lluvia df_rain_ts_year &lt;- df_rain_ts df_rain_ts_year$year &lt;- year(index(df_rain_ts_year)) df_rain_ts_year &lt;- as.data.frame(df_rain_ts_year) Primero se aplica summarise para el dataframe de temperatura para cada año: df_temp_max_ts_year %&gt;% group_by(year) %&gt;% summarise( Min_BOG = min(BOG, na.rm = TRUE), Avg_BOG = mean(BOG, na.rm = TRUE), Med_BOG = median(BOG, na.rm = TRUE), Max_BOG = max(BOG, na.rm = TRUE), Min_MED = min(MED, na.rm = TRUE), Avg_MED = mean(MED, na.rm = TRUE), Med_MED = median(MED, na.rm = TRUE), Max_MED = max(MED, na.rm = TRUE), Min_VUP = min(VUP, na.rm = TRUE), Avg_VUP = mean(VUP, na.rm = TRUE), Med_VUP = median(VUP, na.rm = TRUE), Max_VUP = max(VUP, na.rm = TRUE), ) ## # A tibble: 6 × 13 ## year Min_BOG Avg_BOG Med_BOG Max_BOG Min_MED Avg_MED Med_MED Max_MED Min_VUP ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2018 16.2 21.0 21 24.5 22 28.0 28.2 31.8 28 ## 2 2019 Inf NaN NA -Inf 22.6 28.7 28.8 33.6 27.8 ## 3 2020 Inf NaN NA -Inf Inf NaN NA -Inf 32.6 ## 4 2021 Inf NaN NA -Inf 21.4 27.2 27.4 30 Inf ## 5 2022 16.7 20.2 20.2 23 20.6 27.2 27.4 31.1 Inf ## 6 2023 14.2 20.4 20.6 24.2 22.2 28.7 28.8 32.6 31.1 ## # ℹ 3 more variables: Avg_VUP &lt;dbl&gt;, Med_VUP &lt;dbl&gt;, Max_VUP &lt;dbl&gt; # %&gt;% # kable() %&gt;% # kable_styling(full_width = FALSE) df_rain_ts_year %&gt;% group_by(year) %&gt;% summarise( Min_BOG = min(BOG, na.rm = TRUE), Avg_BOG = mean(BOG, na.rm = TRUE), Max_BOG = max(BOG, na.rm = TRUE), Sum_BOG = sum(BOG, na.rm = TRUE), Min_MED = min(MED, na.rm = TRUE), Avg_MED = mean(MED, na.rm = TRUE), Max_MED = max(MED, na.rm = TRUE), Sum_MED = sum(MED, na.rm = TRUE), Min_VUP = min(VUP, na.rm = TRUE), Avg_VUP = mean(VUP, na.rm = TRUE), Max_VUP = max(VUP, na.rm = TRUE), Sum_VUP = sum(VUP, na.rm = TRUE) ) ## # A tibble: 6 × 13 ## year Min_BOG Avg_BOG Max_BOG Sum_BOG Min_MED Avg_MED Max_MED Sum_MED Min_VUP ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2018 0 2.43 32.4 888. 0 4.93 58.5 1799. 0 ## 2 2019 0 0.932 31.9 340 0 1.90 33.9 694. 0 ## 3 2020 0 2.38 42.6 870. 0 1.07 46.2 390. 0 ## 4 2021 0 1.23 31.8 448. 0 2.28 40.0 832. 0 ## 5 2022 0 3.14 48.5 1145. 0 5.62 55.0 2052. 0 ## 6 2023 0 1.99 31.9 273. 0 3.47 39.5 549. 0 ## # ℹ 3 more variables: Avg_VUP &lt;dbl&gt;, Max_VUP &lt;dbl&gt;, Sum_VUP &lt;dbl&gt; Lo anterior, se puede apreciar mejor al realizar visualmente el análisis por años por medio de diagramas de caja / boxplots: # Pivot df year para ggplot df_temp_max_ts_year_pivot &lt;- pivot_longer(df_temp_max_ts_year, cols = c(BOG, MED, VUP), names_to = &quot;Ciudad&quot;, values_to = &quot;Temperatura&quot;) # Boxplots temperatura por ciudad y año ggplot(df_temp_max_ts_year_pivot, aes(x = factor(year), y = Temperatura, fill = Ciudad)) + geom_boxplot() + facet_wrap(~ Ciudad, scales = &quot;free&quot;) + scale_fill_manual(values = city_colors) + labs(title = &quot;Diagrama de cajas de temperaturas máximas por ciudad y año&quot;, x = &quot;Año&quot;, y = &quot;Temperatura [°C]&quot;) + theme_minimal() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) Como se había evidenciado anteriormente, se presentan años completos sin registros: 2019-2021 en Bogotá, 2020 en Medellín y 2021-2022 en Valledupar. # Pivot df year lluvia df_rain_ts_year_pivot &lt;- pivot_longer(df_rain_ts_year, cols = c(BOG, MED, VUP), names_to = &quot;Ciudad&quot;, values_to = &quot;Lluvia&quot;) # Boxplots lluvia por ciudad y año ggplot(df_rain_ts_year_pivot, aes(x = factor(year), y = Lluvia, fill = Ciudad)) + geom_boxplot() + facet_wrap(~ Ciudad, scales = &quot;free&quot;) + scale_fill_manual(values = city_colors) + labs(title = &quot;Diagrama de cajas de precipitaciones por ciudad y año&quot;, x = &quot;Año&quot;, y = &quot;Lluvia [mm]&quot;) + theme_minimal() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) De los diagramas de cajas de precipitación anteriores, se puede observar que el año con mayores registros (milímetros de lluvia diaria) se encuentran en el año 2022 para Bogotá y Valledupar y el 2018 para Medellín (seguido por el 2022). En Valledupar se logra identificar que el año 2022 presenta 4 registros mayores a 600 mm, lo cual no ocurre en ningún otro año en dicha estación (ni en las otras ciudades), por lo tanto es posible que se deban descartar dichos datos en análisis o predicciones futuras de la serie de tiempo. 2.6 Observaciones finales El presente capítulo presenta el análisis exploratorio de las series de tiempo de la temperatura máxima y la precipitación total diaria para tres ciudades capitales de Colombia (Bogotá, Medellín y Valledupar), cada una perteneciente a una zona climática diferente. Es claro en el estudio que las series presentan años completos sin datos (especialmente en la pandemia Covid-19) por lo que será necesario contemplar dichos faltantes en análisis futuros. Referencias ———. 2021. «Banco de Datos del IDEAM - DHIME». http://dhime.ideam.gov.co/atencionciudadano/. "],["preprocesamiento-y-visualización.html", "Capítulo 3 Preprocesamiento y visualización 3.1 Medias móviles 3.2 Descomposición 3.3 Dickey-Fuller Test 3.4 Funciones de autocorrelación (ACF y PACF) 3.5 Rezagos", " Capítulo 3 Preprocesamiento y visualización Parte de las visualizaciones para el conjunto de datos analizados se desarrollaron en el capítulo 02 al crear las series de tiempo (2.3) y especialmente en el análisis exploratorio de datos / EDA (2.5), por lo que para este capítulo se presentan las medias móviles, la descomposición de las series y los rezagos. Con el Conjunto de datos cargados y procesados en el capítulo 2, se procede con los análisis adicionales del presente capítulo. # xts temperatura head(df_temp_max_ts) ## BOG MED VUP ## 2018-01-01 NA 26.3 34.2 ## 2018-01-02 NA 25.6 32.3 ## 2018-01-03 NA 28.7 33.5 ## 2018-01-04 NA 27.4 33.4 ## 2018-01-05 NA 25.8 32.8 ## 2018-01-06 NA 28.0 34.2 # xts precipitación head(df_rain_ts) ## BOG MED VUP ## 2018-01-01 13.8 0.012 0.00 ## 2018-01-02 0.1 26.304 27.97 ## 2018-01-03 2.2 4.774 1.15 ## 2018-01-04 0.0 7.233 0.00 ## 2018-01-05 17.1 3.169 13.21 ## 2018-01-06 0.3 4.862 0.01 3.1 Medias móviles Se inicia graficando las medias móviles semanales y mensuales para las series de temperatura para las tres ciudades analizadas en el estudio: # Serie original plot(df_temp_max_ts, main=&#39;Temperatura máxima diaria&#39;, xlab=&#39;Fecha&#39;, ylab=&#39;Temperatura [°C]&#39;, col=c(&quot;lightblue&quot;, &quot;lightgreen&quot;, &quot;orange&quot;)) legend(&quot;right&quot;, , col = c(&quot;lightblue&quot;, &quot;lightgreen&quot;, &quot;orange&quot;), lty = 1, lwd = 1, legend = c(&quot;BOG&quot;, &quot;MED&quot;, &quot;VUP&quot;)) # Media móvil semanal lines(rollmean(df_temp_max_ts, 7), col=&quot;blue&quot;, lwd=2) # Media móvil mensual lines(rollmean(df_temp_max_ts, 30), col=&quot;red&quot;, lwd=2) En las gráficas anteriores se aprecian las series de tiempo original de temperatura máxima diaria, con las medias móviles semanales en azul oscuro y la mensual en rojo. A pesar de los datos faltantes (posiblemente por pandemia), las medias móviles se calculan y grafican para las tres ciudades en los años iniciales y continuan solamente para Medellín (línea verde claro) y aunque no se nota casi para Valledupar también (línea naranja). Bogotá al contar con la mayor cantidad de datos faltantes no se calcula, ni grafica después de retomarse las mediciones en el año 2023. Ahora se procede con las medias móviles semanales y mensuales de los datos de precipitación: # Serie original plot(df_rain_ts, main=&#39;Precipitación total diaria&#39;, xlab=&#39;Fecha&#39;, ylab=&#39;Lluvia [mm]&#39;, col=c(&quot;lightblue&quot;, &quot;lightgreen&quot;, &quot;orange&quot;)) legend(&quot;bottom&quot;, legend = c(&quot;BOG&quot;, &quot;MED&quot;, &quot;VUP&quot;)) # Media móvil semanal lines(rollmean(df_rain_ts, 7), col=&quot;blue&quot;, lwd=2) # Media móvil mensual lines(rollmean(df_rain_ts, 30), col=&quot;red&quot;, lwd=2) Las medias móviles semanales y mensuales de las series de precipitación se calculan y grafican sin problema, aunque al ser tan cercanas, no alcanzan a diferenciarse, es notorio el salto en marzo 2022 por las lluvias superiores a 700 mm en Valledupar. 3.2 Descomposición En vista de los Datos faltantes en los datasets, especialmente para los registros de temperatura, se procede a realizar la descomposición para el 2022 de precipitación en Bogotá y el 2023 de temperatura en Medellín. # Precipitación total diaria Bogotá 2022 BOG_rain_2022 &lt;- df_rain_ts[&quot;2022&quot;, &quot;BOG&quot;] head(BOG_rain_2022) ## BOG ## 2022-01-01 0.0 ## 2022-01-02 0.0 ## 2022-01-03 0.0 ## 2022-01-04 0.6 ## 2022-01-05 0.0 ## 2022-01-06 0.0 tail(BOG_rain_2022) ## BOG ## 2022-12-26 0.2 ## 2022-12-27 0.0 ## 2022-12-28 0.1 ## 2022-12-29 0.1 ## 2022-12-30 0.2 ## 2022-12-31 0.3 colSums(is.na(BOG_rain_2022)) ## BOG ## 0 # Temperatura máxima diaria Medellín 2023 MED_temp_2023 &lt;- df_temp_max_ts[&quot;2023&quot;, &quot;MED&quot;] head(MED_temp_2023) ## MED ## 2023-01-01 26.8 ## 2023-01-02 27.9 ## 2023-01-03 22.5 ## 2023-01-04 27.5 ## 2023-01-05 25.6 ## 2023-01-06 26.4 tail(MED_temp_2023) ## MED ## 2023-12-26 28.0 ## 2023-12-27 29.2 ## 2023-12-28 26.2 ## 2023-12-29 26.9 ## 2023-12-30 28.2 ## 2023-12-31 29.4 colSums(is.na(MED_temp_2023)) ## MED ## 0 Se procede a realizar la descomposición en las series con frecuencias mensuales (30 días), tanto para la lluvia en Bogotá y la temperatura en Medellín. # Decompose Lluvia attr(BOG_rain_2022, &#39;frequency&#39;) &lt;- 30 plot(decompose(as.ts(BOG_rain_2022))) De la gráfica de tendencia se aprecia claramente que los mayores registros de precipitación se encuentran entre marzo y mayo (meses 3 y 5) y nuevamente se presentan altas lluvias entre septiembre y noviembre (meses 9-11), lo cual evidencia como en todo el país un ciclo de lluvias bimodal. # Decompose temperatura attr(MED_temp_2023, &#39;frequency&#39;) &lt;- 30 plot(decompose(as.ts(MED_temp_2023))) autoplot(stl(MED_temp_2023, s.window = &quot;periodic&quot;)) Como se puede apreciar en las gráficas anteriores para la temperatura, se obtienen los mismos resultados usando decompose y plot y stl y autplot. En Medellín, las mayores temperaturas se presentan en los meses de mitad de año (lo meses que seguramente llueven menos), especialmente en agosto (mes 8). Las tendencias mensuales anteriores encontradas por descomposición corresponden a identificado por el (IDEAM - Instituto de Hidrología, Meteorología y Estudios Ambientales 2012) para las características climatológicas de ciudades principales y municipios turísticos como Bogotá y Medellín. 3.3 Dickey-Fuller Test Se aplica la función adf.test para verificar si las series seleccionadas son estacionarias: # ADF lluvia adf.test(as.ts(BOG_rain_2022), alternative = &quot;stationary&quot;) ## ## Augmented Dickey-Fuller Test ## ## data: as.ts(BOG_rain_2022) ## Dickey-Fuller = -5.0401, Lag order = 7, p-value = 0.01 ## alternative hypothesis: stationary # ADF temperatura adf.test(as.ts(MED_temp_2023), alternative = &quot;stationary&quot;) ## ## Augmented Dickey-Fuller Test ## ## data: as.ts(MED_temp_2023) ## Dickey-Fuller = -4.2854, Lag order = 7, p-value = 0.01 ## alternative hypothesis: stationary Tal como se ve en el material de la Unidad 3, si el valor \\(p\\) es menor que \\(0.05\\) las series son estacionarias, en este caso evidentemente, la lluvia y temperatura diaria son estacionarias. Pensando en un nivel de significancia del \\(5\\%\\) De todos modos se verifica con ndiffs: # NDIFF lluvia ndiffs(as.ts(BOG_rain_2022)) ## [1] 0 # NDIFF temperatura ndiffs(as.ts(MED_temp_2023)) ## [1] 1 Encontramos que ndiffs nos da \\(1\\) para la serie de temperatura en Medellín por lo que aplicamos diff: MED_temp_2023_diff &lt;- diff(as.ts(MED_temp_2023)) plot(MED_temp_2023_diff, main=&quot;Diferencia de temperatura máxima diaria en Medellín 2023&quot;, ylab=&quot;Diferencia de temperatura&quot;, xlab=&quot;Tiempo&quot;, col=&quot;lightgreen&quot;) Volvemos a verificar con adf adf.test(MED_temp_2023_diff) ## Warning in adf.test(MED_temp_2023_diff): p-value smaller than printed p-value ## ## Augmented Dickey-Fuller Test ## ## data: MED_temp_2023_diff ## Dickey-Fuller = -10.091, Lag order = 7, p-value = 0.01 ## alternative hypothesis: stationary 3.4 Funciones de autocorrelación (ACF y PACF) Ahora se aplican las funciones de autocorrelación acf () y pacf () a las series seleccionados de precipitación y temperaturas diarias: # ACF y PACF Lluvia acf(BOG_rain_2022) pacf(BOG_rain_2022) # ACF y PACF temperatura acf(MED_temp_2023_diff) pacf(MED_temp_2023_diff) Los anteriores resultados se estudiarán en mayor profundidad al ver modelos AR / ARIMA. 3.5 Rezagos Por último se generan las gráficas de rezagos: # Rezagos Lluvia lag.plot(BOG_rain_2022, lags = 12, do.lines = FALSE) # Rezagos Temperatura lag.plot(MED_temp_2023, lags = 12, do.lines = FALSE) Referencias IDEAM - Instituto de Hidrología, Meteorología y Estudios Ambientales. 2012. «Características climatológicas de ciudades principales y municipios turisticos». http://www.ideam.gov.co/web/entidad/acerca-entidad. "],["introducción-modelos-pronóstico.html", "Capítulo 4 Introducción modelos pronóstico 4.1 Tendencias y ciclos 4.2 Modelo Holt-Winters 4.3 Predicciones iniciales", " Capítulo 4 Introducción modelos pronóstico En el presente capítulo se aplica la metodología Holt-Winter y de suavizamiento a las series de tiempo estudiadas en el documento. Con los datasets procesados en los capítulos 2 Conjunto de datos y 3 Preprocesamiento y visualización, se procede con los análisis en mención. 4.1 Tendencias y ciclos Se seleccionaron las series con más años de datos, por lo que se analizarán la precipitación total diaria de Bogotá entre los años 2018 y 2019 y la temperatura máxima diaria de Medellín entre 2022 y 2023. A continuación se presenta la descripción inicial de los datos, la clase de los objetos creados, el inicio y fin, su frecuencia, así como la cantidad de NA y un resumen estadístico para cada serie. # Serie xts Precipitación total diaria Bogotá 2018-2019 BOG_rain_2018_2019 &lt;- df_rain_ts[&quot;2018/2019&quot;, &quot;BOG&quot;] str(BOG_rain_2018_2019) ## An xts object on 2018-01-01 / 2019-12-31 containing: ## Data: double [730, 1] ## Columns: BOG ## Index: Date [730] (TZ: &quot;UTC&quot;) class(BOG_rain_2018_2019) ## [1] &quot;xts&quot; &quot;zoo&quot; start(BOG_rain_2018_2019) ## [1] &quot;2018-01-01&quot; end(BOG_rain_2018_2019) ## [1] &quot;2019-12-31&quot; frequency(BOG_rain_2018_2019) ## [1] 1 colSums(is.na(BOG_rain_2018_2019)) ## BOG ## 0 # Serie ts Precipitación total diaria Bogotá 2018-2019 BOG_rain_2018_2019_ts &lt;- as.ts(BOG_rain_2018_2019) class(BOG_rain_2018_2019_ts) ## [1] &quot;ts&quot; str(BOG_rain_2018_2019_ts) ## Time-Series [1:730] from 1 to 730: 13.8 0.1 2.2 0 17.1 0.3 0.1 0 5.6 8.8 ... summary(BOG_rain_2018_2019_ts) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.000 0.000 0.000 1.683 0.975 32.400 # Serie xts Temperatura máxima diaria Medellín 2022-2023 MED_temp_2022_2023 &lt;- df_temp_max_ts[&quot;2022/2023&quot;, &quot;MED&quot;] str(MED_temp_2022_2023) ## An xts object on 2022-01-01 / 2023-12-31 containing: ## Data: double [730, 1] ## Columns: MED ## Index: Date [730] (TZ: &quot;UTC&quot;) class(MED_temp_2022_2023) ## [1] &quot;xts&quot; &quot;zoo&quot; start(MED_temp_2022_2023) ## [1] &quot;2022-01-01&quot; end(MED_temp_2022_2023) ## [1] &quot;2023-12-31&quot; frequency(MED_temp_2022_2023) ## [1] 1 colSums(is.na(MED_temp_2022_2023)) ## MED ## 0 # Serie ts Temperatura máxima diaria Medellín 2022-2023 MED_temp_2022_2023_ts &lt;- as.ts(MED_temp_2022_2023) class(MED_temp_2022_2023_ts) ## [1] &quot;ts&quot; str(MED_temp_2022_2023_ts) ## Time-Series [1:730] from 1 to 730: 27.4 26.4 27.8 28 28.2 26 25 26.8 27.4 24.6 ... summary(MED_temp_2022_2023_ts) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 20.60 26.50 28.00 27.93 29.40 32.60 Primero se procede a graficar con plot el comportamiento de la serie de tiempo / xts para las variables seleccionadas: # Plot xts Precipitación Bogotá plot(BOG_rain_2018_2019, main=&#39;Precipitación total diaria Bogotá 2018-2019&#39;, xlab=&#39;Fecha&#39;, ylab=&#39;Lluvia [mm]&#39;, col=&quot;lightblue&quot;) Aunque anteriormente no se encontraron datos faltantes / NA en el conjunto de datos seleccionados para la precipitación, de la anterior gráfica se nota claramente, que entre marzo (mes 3) y agosto (mes 8) de 2019 se presentan registros seguidos sin precipitación (0 mm), aunque es de esperar que no llueva todos los días del año en Bogotá, no tiene sentido que se presenten cinco meses continuos sin registros de lluvia. Los datos anteriores permiten inferir que el sensor / pluviómetro posiblemente presentó fallas en dichos meses, por lo que se procede a revisar los datos en el dataframe y se encuentra que contiene ceros con un “formato diferente” (int 0 vs dbl 0.0) en el periodo en mención1, lo cual es indicador de una falta de validación de los datos entre finales de marzo e inicios de agosto de 2019, por lo que en dichos meses se debe ser prudente con dichos registros y si es necesario descartarlos o no tenerlos en cuenta en el análisis por atípicos / inválidos. Caso contrario se evidencia en la figura siguiente que presenta la tendencia de la temperatura máxima diaria en Medellín y en la cual se observa fácilmente que no encuentran datos por fuera del rango de 20 a 33 ºC, que es lo esperado para dicha variable e indica consistencia en la medición y ausencia de valores extremos o datos atípicos fuera de ese rango. Esto sugiere una buena calidad de los datos y confiabilidad en las mediciones de temperatura en la estación durante el período analizado. # Plot xts Temperatura Medellín plot(MED_temp_2022_2023, main=&quot;Temperatura máxima diaria Medellín 2022-2023&quot;, xlab=&#39;Fecha&#39;, ylab=&#39;Temperatura [°C]&#39;, col=&quot;lightgreen&quot;) Ahora con lm obtenemos la tendencia tanto para las series / ts para la precipitación y para la temperatura: # Tendencia precipitación Bogotá plot(BOG_rain_2018_2019_ts, main=&#39;Tendencia Precipitación total diaria Bogotá 2018-2019&#39;, xlab=&#39;Tiempo / Día&#39;, ylab=&#39;Lluvia [mm]&#39;, col=&quot;lightblue&quot;) abline(reg=lm(BOG_rain_2018_2019_ts~time(BOG_rain_2018_2019_ts))) Se observa en la figura anterior una tendencia de la precipitación en Medellín que decrece desde cerca de los 4 mm de lluvia en enero de 2018 (t=0) a prácticamente 0 mm en diciembre de 2019 (t=730). Mientras que en la figura siguiente para la temperatura se aprecia una tendencia que aumenta cerca de dos grados desde de aproximadamente 26.5 ºC en t0 a 29 ºC en t730 en los años analizados. # Tendencia temperatura Medellín plot(MED_temp_2022_2023_ts, main=&quot;Tendencia Temperatura máxima diaria Medellín&quot;, xlab=&#39;Tiempo / Día&#39;, ylab=&#39;Temperatura [°C]&#39;, col=&quot;lightgreen&quot;) abline(reg=lm(MED_temp_2022_2023_ts~time(MED_temp_2022_2023_ts))) A continuación se presenta un resumen de los datos y se analizan las tendencias mensuales de la precipitación (la lluvia se suma para obtener los mm acumulados por mes) y la temperatura (se promedian los valores mensuales): # Precipitación total acumulada mensual BOG_rain_2018_2019_monthly &lt;- apply.monthly(BOG_rain_2018_2019, FUN=sum) str(BOG_rain_2018_2019_monthly) ## An xts object on 2018-01-31 / 2019-12-31 containing: ## Data: double [24, 1] ## Columns: BOG ## Index: Date [24] (TZ: &quot;UTC&quot;) summary(BOG_rain_2018_2019_monthly) ## Index BOG ## Min. :2018-01-31 Min. : 0.00 ## 1st Qu.:2018-07-23 1st Qu.: 23.32 ## Median :2019-01-15 Median : 45.00 ## Mean :2019-01-14 Mean : 51.18 ## 3rd Qu.:2019-07-07 3rd Qu.: 63.20 ## Max. :2019-12-31 Max. :199.70 # Serie ts precipitación mensual BOG_rain_2018_2019_monthly_ts &lt;- ts(BOG_rain_2018_2019_monthly, start=c(2018, 1), frequency=12) # Tendencia precipitación acumulada mensual Bogotá plot(BOG_rain_2018_2019_monthly_ts, main=&#39;Tendencia Precipitación total acumulada mensual Bogotá 2018-2019&#39;, xlab=&#39;Tiempo / Mes&#39;, ylab=&#39;Lluvia [mm]&#39;, col=&quot;lightblue&quot;) abline(reg=lm(BOG_rain_2018_2019_monthly_ts~time(BOG_rain_2018_2019_monthly_ts))) En la figura anterior se confirma que con los datos de abril, mayo, junio y julio de 2019 en el dataset se obtienen precipitaciones mensuales de cero milímetros, por lo que dichos meses se asumen como no válidos debido a fallas en el equipo de medición. En la figura siguiente se presenta la tendencia de la temperatura máxima promedio mensual que presenta como era de esperar una línea creciente de aproximadamente de 26.5 a 29 ºC. # Temperatura máxima promedio mensual MED_temp_2022_2023_monthly &lt;- apply.monthly(MED_temp_2022_2023, FUN=mean) str(MED_temp_2022_2023_monthly) ## An xts object on 2022-01-31 / 2023-12-31 containing: ## Data: double [24, 1] ## Columns: MED ## Index: Date [24] (TZ: &quot;UTC&quot;) summary(MED_temp_2022_2023_monthly) ## Index MED ## Min. :2022-01-31 Min. :26.04 ## 1st Qu.:2022-07-23 1st Qu.:27.14 ## Median :2023-01-15 Median :27.57 ## Mean :2023-01-14 Mean :27.92 ## 3rd Qu.:2023-07-07 3rd Qu.:28.67 ## Max. :2023-12-31 Max. :30.39 # Serie ts temperatura mensual MED_temp_2022_2023_monthly_ts &lt;- ts(MED_temp_2022_2023_monthly, start=c(2022, 1), frequency=12) # Tendencia temperatura promedio mensual Medellín plot(MED_temp_2022_2023_monthly_ts, main=&quot;Tendencia Temp. máxima promedio mensual Medellín 2022-2023&quot;, xlab=&#39;Tiempo / Mes&#39;, ylab=&#39;Temperatura [°C]&#39;, col=&quot;lightgreen&quot;) abline(reg=lm(MED_temp_2022_2023_monthly_ts~time(MED_temp_2022_2023_monthly_ts))) A continuación obtenemos el ciclo mensual para cada una de las variables estudiadas en las ciudades seleccionadas y se grafica con aggregate. # Ciclo lluvia Bogotá cycle(BOG_rain_2018_2019_monthly_ts) ## Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec ## 2018 1 2 3 4 5 6 7 8 9 10 11 12 ## 2019 1 2 3 4 5 6 7 8 9 10 11 12 plot(aggregate(BOG_rain_2018_2019_monthly_ts, FUN=mean), main=&#39;Tendencia aggregate Precip. acumulada mensual Bogotá 2018-2019&#39;, xlab=&#39;Tiempo / Mes&#39;, ylab=&#39;Lluvia [mm]&#39;) Tanto en la gráfica anterior, como en la siguiente, en ambos casos se obtienen las mismas tendencias para la precipitación y la temperatura que las encontradas anteriormente con abline y la regresión lineal con lm. # Ciclo temperatura Medellín cycle(MED_temp_2022_2023_monthly_ts) ## Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec ## 2022 1 2 3 4 5 6 7 8 9 10 11 12 ## 2023 1 2 3 4 5 6 7 8 9 10 11 12 plot(aggregate(MED_temp_2022_2023_monthly_ts, FUN=mean), main=&quot;Tendencia aggregate Temp. máxima mensual Medellín 2022-2023&quot;, xlab=&#39;Tiempo / Mes&#39;, ylab=&#39;Temperatura [°C]&#39;,) Ahora se presenta la dispersión / comportamiento mensual por medio de boxplots tanto para las precipitaciones en Bogotá, así como para las temperaturas en Medellín: # Boxpplot lluvia mensual Bogotá boxplot(BOG_rain_2018_2019_monthly_ts~cycle(BOG_rain_2018_2019_monthly_ts), main=&quot;Dispersión Precipitación total acumulada mensual Bogotá 2018-2019&quot;, xlab=&#39;Mes&#39;, ylab=&#39;Lluvia [mm]&#39;, col=&quot;lightblue&quot;) # Boxplot temperatura mensual Medellín boxplot(MED_temp_2022_2023_monthly_ts~cycle(MED_temp_2022_2023_monthly_ts), main=&quot;Dispersión Temperatura máxima mensual Medellín 2022-2023&quot;, xlab=&#39;Mes&#39;, ylab=&#39;Temperatura [°C]&#39;, col=&quot;lightgreen&quot;) Tal como se refiere en los materiales de la unidad, se procede a probar la función logaritmo2 para graficar nuevamente los datos de temperatura y evidenciar si se obtiene alguna mejora en la visualización de las series diarias y mensuales. # Logaritmo temperatura Medellín plot(log(MED_temp_2022_2023), main=&quot;Logaritmo Temperatura máxima diaria Medellín&quot;, xlab=&#39;Fecha&#39;, ylab=&#39;Temperatura [°C]&#39;, col=&quot;lightgreen&quot;) # Logaritmo temperatura mensual Medellín plot(log(MED_temp_2022_2023_monthly_ts), main=&#39;Logaritmo Temp. máxima promedio mensual Medellín 2022-2023&#39;, xlab=&#39;Tiempo / Mes&#39;, ylab=&#39;log(Temperatura [°C])&#39;, col=&quot;lightblue&quot;) En las gráficas anteriores no se observa cambio significativo en los comportamientos / tendencias de las series de temperatura, más allá de los valores / órdenes de magnitud obtenidos al aplicar logaritmo. 4.2 Modelo Holt-Winters Ahora, se aplica el modelo Holt-Winters para la serie mensual de temperatura en Medellín. Esta metodología requiere indicar los siguientes parámetros: 1) alfa, que el parámetro de suavizado del nivel, 2) beta el parámetro de suavizado para la tendencia, 3) gamma el parámetro de suavizado para la estacionalidad, 4) tipo de estacionalidad. Como se observo en el capitulo anterior, la prueba de Dickey-Fuller rechazó la hipótesis nula, indicando una estacionalidad aditiva la cual sera empleada en el método Holt-Winters, sin embargo los otros parámetros deben ser optimizados, este procedimiento es realizado por la función HoltWinters de manera automática o puede ser ejecutado externamente empleando optim y definiendo la métrica de error que se desee evaluar, en este capítulo se realizan ambos métodos. # Holt Winters temperatura mensual Medellín MED_temp_2022_2023_monthly_HW &lt;- HoltWinters(MED_temp_2022_2023_monthly_ts, seasonal = &quot;additive&quot;) plot(MED_temp_2022_2023_monthly_HW, main=&#39;Ajuste Holt-Winters Temp. Max. promedio mensual Medellín 2022-2023&#39;, xlab=&#39;Tiempo / Mes&#39;, ylab=&#39;Temperatura [C]&#39;, col=&quot;lightgreen&quot;) Los parámetros para la temperatura empleados por el modelo Holt-winters de manera automática fueron los siguientes: cat(&quot;alpha: &quot;, MED_temp_2022_2023_monthly_HW$alpha, &quot; beta: &quot;, MED_temp_2022_2023_monthly_HW$beta, &quot; gamma: &quot;, MED_temp_2022_2023_monthly_HW$gamma) ## alpha: 0.2369436 beta: 0.07256704 gamma: 0.1 A continuación se ejecuta el modelo Holt-Winters buscando un nuevo set de parámetros buscados mediante una optimización teniendo en cuenta como función objetivo el Error de Porcentaje Medio Absoluto (MAPE), con el fin de evaluar si hay un cambio drástico frente a la metodología automática. # Función error MAPE error_function &lt;- function(params) { alpha &lt;- params[1] beta &lt;- params[2] gamma &lt;- params[3] hw_fit &lt;- HoltWinters(MED_temp_2022_2023_monthly_ts, alpha = alpha, beta = beta, gamma = gamma) abs_percent_errors &lt;- abs(residuals(hw_fit) / MED_temp_2022_2023_monthly_ts) mape &lt;- mean(abs_percent_errors, na.rm = TRUE) * 100 return(mape) } # Optimización parámetros initial_params &lt;- c(0.2, 0.2, 0.2) optimized_params &lt;- optim(initial_params, error_function)$par cat(&quot;alpha: &quot;, optimized_params[1], &quot; beta: &quot;, optimized_params[2], &quot; gamma: &quot;, optimized_params[3]) ## alpha: 0.3516182 beta: 0.2725255 gamma: 0.118212 # Modelo óptimo MED_temp_2022_2023_monthly_HW_optimal &lt;- HoltWinters(MED_temp_2022_2023_monthly_ts, alpha = optimized_params[1], beta = optimized_params[2], gamma = optimized_params[3]) plot(MED_temp_2022_2023_monthly_HW_optimal, main=&#39;Segundo Ajuste Holt-Winters Temp. Max. promedio mensual Medellín&#39;, xlab=&#39;Tiempo / Mes&#39;, ylab=&#39;Temperatura [°C]&#39;, col=&quot;lightgreen&quot;) Se observa que el modelo 1 el cual usa los parámetros obtenidos automáticamente versus el segundo modelo que obtuvo los parámetros con una función de error diferente, MAPE, presentan una muy baja diferencia entre ellos, lo cual puede deberse a el bajo número de datos, 24 registros. A continuación se presentan la descomposición para el modelo original/automático obtenido anteriormente: # Descomposición Holt Winters log temperatura Medellín plot(fitted(MED_temp_2022_2023_monthly_HW), main=&#39;Descomposicion con Holt-Winters Temp. máx. promedio mensual Medellín&#39;, xlab=&#39;Tiempo / Mes&#39;, ylab=&#39;Temperatura [°C])&#39;, col=&quot;lightgreen&quot;) 4.3 Predicciones iniciales Ahora que contamos con los modelos Holt Winters (HW) aplicados a la series mensuales de temperatura en Medellín, se procede a realizar unas predicciones iniciales para seis meses. # Predicción Holt Winters temperatura Medellín MED_temp_2022_2023_monthly_Pred &lt;- predict(MED_temp_2022_2023_monthly_HW, 6, prediction.interval = TRUE) MED_temp_2022_2023_monthly_Pred ## fit upr lwr ## Jan 2024 29.29153 30.79737 27.78569 ## Feb 2024 30.39437 31.94807 28.84066 ## Mar 2024 29.12354 30.73007 27.51701 ## Apr 2024 29.68363 31.34787 28.01939 ## May 2024 31.32207 33.04881 29.59533 ## Jun 2024 31.27666 33.07057 29.48276 # Predicción modelo optimizado temperatura Medellín MED_temp_2022_2023_monthly_Pred2 &lt;- predict(MED_temp_2022_2023_monthly_HW_optimal, 6, prediction.interval = TRUE) MED_temp_2022_2023_monthly_Pred2 ## fit upr lwr ## Jan 2024 29.21094 30.86264 27.55924 ## Feb 2024 30.24939 32.05889 28.43988 ## Mar 2024 28.91671 30.93649 26.89694 ## Apr 2024 29.41702 31.69600 27.13804 ## May 2024 30.99904 33.58114 28.41695 ## Jun 2024 30.90072 33.82475 27.97668 A continuación se observa el delta entre la predicción de ambos modelos, en este caso se observan ligeras diferencias entre ambos tanto en su predicción como en sus límites superior e inferior, mostrando que el segundo modelo tiende a predecir valores más bajos que el original debido a los parámetros de suavizado empleados son más altos en el primer modelo. Esto se debe a que parámetros más altos tienden a capturar las tendencias más recientes por ende resultando en datos de temperatura ligeramente más bajos en el segundo modelo. # Diferencia predicciones MED_temp_2022_2023_monthly_Pred-MED_temp_2022_2023_monthly_Pred2 ## MED_temp_2022_2023_monthly_Pred.fit ## Jan 2024 0.08058729 ## Feb 2024 0.14498089 ## Mar 2024 0.20682333 ## Apr 2024 0.26661345 ## May 2024 0.32302819 ## Jun 2024 0.37594672 ## MED_temp_2022_2023_monthly_Pred.upr ## Jan 2024 -0.06527701 ## Feb 2024 -0.11081771 ## Mar 2024 -0.20641898 ## Apr 2024 -0.34812350 ## May 2024 -0.53232425 ## Jun 2024 -0.75418544 ## MED_temp_2022_2023_monthly_Pred.lwr ## Jan 2024 0.2264516 ## Feb 2024 0.4007795 ## Mar 2024 0.6200656 ## Apr 2024 0.8813504 ## May 2024 1.1783806 ## Jun 2024 1.5060789 Ahora se grafican las predicciones encontradas tanto con el modelo HW automático / original y el segundo con parámetros optimizados: # Gráfico Predicción Holt Winters log temperatura Medellín plot(MED_temp_2022_2023_monthly_HW, MED_temp_2022_2023_monthly_Pred, main=&#39;Predicción Modelo 1 HW Temp. Máx. promedio mensual Medellín&#39;, xlab=&#39;Tiempo / Mes&#39;, ylab=&#39;Temperatura [°C])&#39;, col=c(&quot;lightgreen&quot;, &quot;green&quot;)) # Gráfico Predicción Holt Winters log temperatura Medellín plot(MED_temp_2022_2023_monthly_HW_optimal, MED_temp_2022_2023_monthly_Pred2, main=&#39;Predicción Modelo 2 HW Temp. Máx. promedio mensual Medellín&#39;, xlab=&#39;Tiempo / Mes&#39;, ylab=&#39;Temperatura [°C])&#39;, col=c(&quot;lightgreen&quot;, &quot;green&quot;)) Las predicciones encontradas con Holt-Winters siguen una tendencia creciente de la temperatura máxima mensual y parece no tener en cuenta el ciclo climático, pero es una primera aproximación que como todo pronóstico se debe analizar en profundidad y tener claro los datos usados para generar predicciones futuras. Independiente de las predicciones obtenidas, es importante tener en cuenta las limitaciones del modelo de Holt-Winters. Una de las principales limitaciones es la característica multiplicativa de la estacionalidad. Cuando hay períodos con valores muy bajos, como puede ser el caso en datos de temperatura, la estacionalidad puede comportarse de manera inesperada debido a las diferencias relativas significativas. Por lo tanto, aunque Holt-Winters es una técnica efectiva para el pronóstico, es necesario considerar estas limitaciones y realizar análisis adicionales para una comprensión más completa del comportamiento de los datos. Los registros continuos de “ceros” van exactamente desde 2019-03-19 hasta 2019-08-07.↩︎ Debido a la presencia de ceros en los datos de precipitación no se aplica el logaritmo a dicha variable para evitar resultados infinitos / INF.↩︎ "],["modelos-estacionarios-en-series-de-tiempo.html", "Capítulo 5 Modelos estacionarios en series de tiempo 5.1 Selección de series 5.2 Puntos de cambio 5.3 Verificación de estacionariedad 5.4 Funciones de ACF y PACT 5.5 Modelos ARIMA 5.6 Observaciones predicciones", " Capítulo 5 Modelos estacionarios en series de tiempo En el presente capítulo se aplica la metodología Box-Jenkins para identificar modelos autoregresivos integrados de media móvil (ARIMA) para analizar y predecir valores futuros de las series de tiempo estudiada en el Grupo. Con las series estudiadas en las Predicciones iniciales se procede a trabajar en el presente capítulo. 5.1 Selección de series Tal como se hizo en la unidad anterior, se trabajará en este capítulo con la temperatura máxima diaria a la cual es posible aplicar los métodos clásicos de series de tiempo. Tal como se vio en el análisis exploratorio inicial de las Series de tiempo, por continuidad de los registros se trabajará con los datos de Valledupar en los años 2018 y 2019 y con los de Medellín entre 2022 y 2023. A continuación se presenta la descripción inicial de los datos, la clase de los objetos creados, el inicio y fin, su frecuencia, así como la cantidad de NA y un resumen estadístico para cada serie. # Serie xts Temperatura máxima diaria Valledupar 2018-2019 VUP_temp_2018_2019 &lt;- df_temp_max_ts[&quot;2018/2019&quot;, &quot;VUP&quot;] str(VUP_temp_2018_2019) ## An xts object on 2018-01-01 / 2019-12-31 containing: ## Data: double [730, 1] ## Columns: VUP ## Index: Date [730] (TZ: &quot;UTC&quot;) class(VUP_temp_2018_2019) ## [1] &quot;xts&quot; &quot;zoo&quot; start(VUP_temp_2018_2019) ## [1] &quot;2018-01-01&quot; end(VUP_temp_2018_2019) ## [1] &quot;2019-12-31&quot; frequency(VUP_temp_2018_2019) ## [1] 1 colSums(is.na(VUP_temp_2018_2019)) ## VUP ## 0 # Serie ts Temperatura máxima diaria Valledupar 2018-2019 VUP_temp_2018_2019_ts &lt;- as.ts(VUP_temp_2018_2019) class(VUP_temp_2018_2019_ts) ## [1] &quot;ts&quot; str(VUP_temp_2018_2019_ts) ## Time-Series [1:730] from 1 to 730: 34.2 32.3 33.5 33.4 32.8 34.2 33.9 34.8 34.4 33.3 ... summary(VUP_temp_2018_2019_ts) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 27.80 34.23 35.60 35.48 36.80 40.60 # Serie xts Temperatura máxima diaria Medellín 2022-2023 MED_temp_2022_2023 &lt;- df_temp_max_ts[&quot;2022/2023&quot;, &quot;MED&quot;] str(MED_temp_2022_2023) ## An xts object on 2022-01-01 / 2023-12-31 containing: ## Data: double [730, 1] ## Columns: MED ## Index: Date [730] (TZ: &quot;UTC&quot;) class(MED_temp_2022_2023) ## [1] &quot;xts&quot; &quot;zoo&quot; start(MED_temp_2022_2023) ## [1] &quot;2022-01-01&quot; end(MED_temp_2022_2023) ## [1] &quot;2023-12-31&quot; frequency(MED_temp_2022_2023) ## [1] 1 colSums(is.na(MED_temp_2022_2023)) ## MED ## 0 # Serie ts Temperatura máxima diaria Medellín 2022-2023 MED_temp_2022_2023_ts &lt;- as.ts(MED_temp_2022_2023) class(MED_temp_2022_2023_ts) ## [1] &quot;ts&quot; str(MED_temp_2022_2023_ts) ## Time-Series [1:730] from 1 to 730: 27.4 26.4 27.8 28 28.2 26 25 26.8 27.4 24.6 ... summary(MED_temp_2022_2023_ts) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 20.60 26.50 28.00 27.93 29.40 32.60 Luego de obtener la descripción de las series, se procede como se ha hecho anteriormente a graficarlas: # Plot ts Temperatura Valledupar plot(VUP_temp_2018_2019_ts, main=&quot;Temperatura máxima diaria Valledupar 2018-2019&quot;, xlab=&quot;Tiempo / Día&quot;, ylab=&quot;Temperatura [°C]&quot;, col=&quot;orange&quot;) abline(h = mean(VUP_temp_2018_2019), col = &quot;red&quot;, lty=&quot;dashed&quot;) Es importante notar que el comportamiento de la temperatura máxima diaria en Valledupar varía entre cerca de los 28 ºC a los 40 ºC. En la figura anterior se aprecia que el promedio de la serie se encuentra cercana a los 35.5 grados Celsius. # Plot xts Temperatura Medellín plot(MED_temp_2022_2023_ts, main=&quot;Temperatura máxima diaria Medellín 2022-2023&quot;, xlab=&quot;Tiempo / Día&quot;, ylab=&quot;Temperatura [°C]&quot;, col=&quot;lightgreen&quot;) abline(h = mean(MED_temp_2022_2023), col = &quot;purple&quot;, lty=&quot;dashed&quot;) Como ya se había descrito para Medellín en capítulo 4 en el numeral de Tendencias y ciclos, la temperatura máxima diaria en la ciudad en los años 2022 y 2023 varía entre los 20 ºC y los 33 ºC, mientras que su promedio se encuentra cerca de los 28 ºC. 5.2 Puntos de cambio Ahora, encontramos los puntos de cambio de las series con la función cpt.mean: # Change points Valledupar VUP_temp_cpt &lt;- cpt.mean(VUP_temp_2018_2019_ts, method = &quot;AMOC&quot;) cpts(VUP_temp_cpt) ## [1] 623 Se puede apreciar que el punto de cambio en la serie de temperatura máxima diaria en Valledupar entre los años 2018 y 2019 se presenta el día 623, es decir, el 16 de septiembre de 2019. # Change points Medellín MED_temp_cpt &lt;- cpt.mean(MED_temp_2022_2023_ts, method = &quot;AMOC&quot;) cpts(MED_temp_cpt) ## [1] 485 Mientras, que para Medellín en la serie de los años 2022 y 2023, el punto de cambio en la temperatura máxima diaria se encuentra según la función cpt.mean el día 485, que corresponde a 1 de mayo de 2023. Finalmente obtenemos con plot las gráficas para cada punto de cambio calculado anteriormente: # Plot change point Valledupar plot(VUP_temp_cpt, type = &quot;l&quot;, cpt.col = &quot;orange&quot;, cpt.width = 3, main=&quot;Punto cambio Temperatura máxima Valledupar&quot;, xlab=&quot;Tiempo / Día&quot;, ylab=&quot;Temperatura [°C]&quot;) Tal como se calculó en Valledupar es claro el cambio / disminución en la línea naranja cerca del día 623. # Plot change point Medellín plot(MED_temp_cpt, type = &quot;l&quot;, cpt.col = &quot;lightgreen&quot;, cpt.width = 3, main=&quot;Punto cambio Temperatura máxima Medellín&quot;, xlab=&quot;Tiempo / Día&quot;, ylab=&quot;Temperatura [°C]&quot;) Nuevamente, tal como se calculó con cpt.mean para Medellín se aprecia en la figura anterior el cambio / aumento en la línea verde claro cerca del día 485. 5.3 Verificación de estacionariedad Por último, procedemos a verificar si las series son estacionarias con la función adf.test: # ADF Valledupar adf.test(VUP_temp_2018_2019_ts, alternative = c(&quot;stationary&quot;, &quot;explosive&quot;)) ## ## Augmented Dickey-Fuller Test ## ## data: VUP_temp_2018_2019_ts ## Dickey-Fuller = -4.3478, Lag order = 8, p-value = 0.01 ## alternative hypothesis: stationary # ADF Medellín adf.test(MED_temp_2022_2023_ts, alternative = c(&quot;stationary&quot;, &quot;explosive&quot;)) ## ## Augmented Dickey-Fuller Test ## ## data: MED_temp_2022_2023_ts ## Dickey-Fuller = -6.0864, Lag order = 8, p-value = 0.01 ## alternative hypothesis: stationary Como en ambos casos, el p-value es menor que 0.05 (en cada caso 0.01) las series de temperatura máxima diaria analizadas son estacionarias. 5.4 Funciones de ACF y PACT Tal como se realizó en el Capítulo 3 para la lluvia en la sección Funciones de autocorrelación (ACF y PACF), ahora se aplican las funciones de autocorrelación acf y pacf y se obtienen las gráficas respectivas para las series de temperatura seleccionadas de Valledupar y Medellín: # ACF y PACF Valledupar acf(VUP_temp_2018_2019_ts, col = &quot;orange&quot;, main=&quot;ACF Temperatura máxima Valledupar&quot;) pacf(VUP_temp_2018_2019_ts, col = &quot;orange&quot;, main=&quot;PACF Temperatura máxima Valledupar&quot;) # ACF y PACF Medellín acf(MED_temp_2022_2023_ts, col = &quot;lightgreen&quot;, main=&quot;ACF Temperatura máxima Medellín&quot;) pacf(MED_temp_2022_2023_ts, col = &quot;lightgreen&quot;, main=&quot;PACF Temperatura máxima Medellín&quot;) 5.5 Modelos ARIMA Ahora, se procede a aplicar la función auto.arima, para encontrar el modelo de ajuste para las series de temperaturas máximas de Valledupar y Medellín: # Auto ARIMA Valledupar VUP_temp_model &lt;- auto.arima(VUP_temp_2018_2019_ts) VUP_temp_model ## Series: VUP_temp_2018_2019_ts ## ARIMA(3,0,1) with non-zero mean ## ## Coefficients: ## ar1 ar2 ar3 ma1 mean ## 1.2715 -0.2007 -0.0910 -0.8465 35.4347 ## s.e. 0.0563 0.0609 0.0429 0.0413 0.4139 ## ## sigma^2 = 2.329: log likelihood = -1342.36 ## AIC=2696.72 AICc=2696.84 BIC=2724.28 El ajuste para el modelo de la temperatura máxima diaria de Valledupar se encuentra en ARIMA(3,0,1), mientras que como se observa a continuación el de Medellín se calcula en ARIMA(2,1,3). # Auto ARIMA Medellín MED_temp_model &lt;- auto.arima(MED_temp_2022_2023_ts) MED_temp_model ## Series: MED_temp_2022_2023_ts ## ARIMA(2,1,3) ## ## Coefficients: ## ar1 ar2 ma1 ma2 ma3 ## -0.4122 0.5378 -0.2224 -0.9113 0.1923 ## s.e. 0.1184 0.1156 0.1347 0.0426 0.1196 ## ## sigma^2 = 2.838: log likelihood = -1412.96 ## AIC=2837.91 AICc=2838.03 BIC=2865.46 5.5.1 Predicciones ARIMA Con los modelos ARIMA listos, con la función forecasty usando los modelos anteriores se procede a predecir 30 días para cada una de las series de Valledupar y Medellín: # Forecast ARIMA Valledupar VUP_temp_arima &lt;- forecast(VUP_temp_model, h = 30,level=95) VUP_temp_arima ## Point Forecast Lo 95 Hi 95 ## 731 35.38321 32.39203 38.37439 ## 732 35.40162 32.15150 38.65173 ## 733 35.46981 32.06462 38.87499 ## 734 35.49066 32.00074 38.98058 ## 735 35.50181 31.95145 39.05217 ## 736 35.50560 31.90761 39.10360 ## 737 35.50629 31.86778 39.14479 ## 738 35.50538 31.83104 39.17973 ## 739 35.50375 31.79699 39.21051 ## 740 35.50179 31.76536 39.23822 ## 741 35.49971 31.73595 39.26347 ## 742 35.49761 31.70859 39.28663 ## 743 35.49554 31.68312 39.30795 ## 744 35.49351 31.65939 39.32763 ## 745 35.49154 31.63727 39.34580 ## 746 35.48962 31.61665 39.36260 ## 747 35.48778 31.59741 39.37814 ## 748 35.48599 31.57946 39.39251 ## 749 35.48426 31.56270 39.40582 ## 750 35.48259 31.54705 39.41813 ## 751 35.48097 31.53242 39.42953 ## 752 35.47941 31.51875 39.44008 ## 753 35.47790 31.50596 39.44984 ## 754 35.47645 31.49401 39.45889 ## 755 35.47504 31.48282 39.46726 ## 756 35.47368 31.47235 39.47500 ## 757 35.47236 31.46255 39.48218 ## 758 35.47109 31.45338 39.48881 ## 759 35.46987 31.44478 39.49496 ## 760 35.46868 31.43672 39.50064 Se encuentra que para Valledupar se obtienen predicciones con auto.arima muy cercanas, entre 35.38 y 35.51 ºC, con sola una variación de 0.12 grados Celsius, por lo realmente son prácticamente constantes (en 35.4 o 35.5 ºC). El promedio de los forecasts auto.arima es de 35.48 ºC (la media de toda la serie de tiempo). # Forecast ARIMA Medellín MED_temp_arima &lt;- forecast(MED_temp_model, h = 30,level=95) MED_temp_arima ## Point Forecast Lo 95 Hi 95 ## 731 28.80578 25.50406 32.10750 ## 732 28.92633 25.41118 32.44147 ## 733 28.73615 25.12274 32.34956 ## 734 28.87938 25.23192 32.52684 ## 735 28.71806 25.04432 32.39181 ## 736 28.86159 25.17718 32.54600 ## 737 28.71567 25.01790 32.41343 ## 738 28.85301 25.14901 32.55701 ## 739 28.71792 25.00380 32.43203 ## 740 28.84747 25.12818 32.56676 ## 741 28.72141 24.99304 32.44978 ## 742 28.84305 25.10974 32.57635 ## 743 28.72511 24.98316 32.46706 ## 744 28.83914 25.09227 32.58601 ## 745 28.72871 24.97343 32.48400 ## 746 28.83556 25.07531 32.59581 ## 747 28.73212 24.96364 32.50061 ## 748 28.83222 25.05870 32.60575 ## 749 28.73533 24.95373 32.51694 ## 750 28.82911 25.04240 32.61582 ## 751 28.73835 24.94369 32.53300 ## 752 28.82619 25.02637 32.62601 ## 753 28.74117 24.93352 32.54881 ## 754 28.82346 25.01059 32.63633 ## 755 28.74381 24.92323 32.56439 ## 756 28.82090 24.99505 32.64675 ## 757 28.74629 24.91284 32.57974 ## 758 28.81850 24.97973 32.65728 ## 759 28.74861 24.90234 32.59488 ## 760 28.81626 24.96462 32.66790 Al igual que la predicción anterior, para Medellín se obtienen valores casi constantes con auto.arima y forecast muy cercanos entre ellos (28.7 ºC - 28.9 ºC), con sola una variación de 0.21 ºC. El promedio de dichas predicciones es 28.79 ºC. A continuación, se grafican con plot las predicciones auto.arima obtenidas para Valledupar y Medellín: # Plot forecast Valledupar plot(VUP_temp_arima, col = &quot;orange&quot;, main=&quot;Predicción ARIMA Temperatura máxima Valledupar&quot;, xlab=&quot;Tiempo / Día&quot;, ylab=&quot;Temperatura [°C]&quot;) abline(h = mean(VUP_temp_2018_2019), col = &quot;red&quot;, lty = &quot;dotted&quot;) En la figura anterior, se aprecia poca variabilidad en la línea azul de la predicción para Valledupar y se nota claramente que los valores son en esencia la media de la serie de tiempo. # Plot forecast Medellín plot(MED_temp_arima, col = &quot;lightgreen&quot;, main=&quot;Predicción ARIMA Temperatura máxima Medellín&quot;, xlab=&quot;Tiempo / Día&quot;, ylab=&quot;Temperatura [°C]&quot;) abline(h = mean(MED_temp_2022_2023), col = &quot;purple&quot;, lty = &quot;dotted&quot;) En Medellín, se aprecia para predicción prácticamente una línea recta, aunque esta vez más cercana a la media después del punto de cambio que a la media de toda la serie. 5.5.1.1 Cálculos residuales Ahora para las predicciones ARIMA, se estiman los residuales y se grafican con qqnorm. # Residuales Valledupar VUP_temp_res = VUP_temp_arima$residuals qqnorm(VUP_temp_res) qqline(VUP_temp_res) # Residuales Medellín MED_temp_res = MED_temp_arima$residuals qqnorm(MED_temp_res) qqline(MED_temp_res) A continuación, se procede a comprobar la normalidad de los modelos ARIMA inicialmente aplicando las pruebas de Shapiro-Wilk con la función shapiro.test. # Shapiro-Wilk Test Valledupar shapiro.test(VUP_temp_res) ## ## Shapiro-Wilk normality test ## ## data: VUP_temp_res ## W = 0.96438, p-value = 2.49e-12 # Shapiro-Wilk Test Medellín shapiro.test(MED_temp_res) ## ## Shapiro-Wilk normality test ## ## data: MED_temp_res ## W = 0.97552, p-value = 1.051e-09 Ambos p-values son muy pequeños cercanos a 2.5E-12 y 1E-9 (por lo tanto mucho menor que 0.05), lo que indica que los modelos ARIMA para ambas ciudades no siguen una distribución normal. Finalmente, se aplican las pruebas Box-Pierce / Ljung-Box con la función Box.test para evaluar la independencia de los residuos. # Box-Pierce Test Valledupar Box.test(VUP_temp_res, type = c(&quot;Box-Pierce&quot;, &quot;Ljung-Box&quot;)) ## ## Box-Pierce test ## ## data: VUP_temp_res ## X-squared = 0.0055686, df = 1, p-value = 0.9405 # Box-Pierce Test Medellín Box.test(MED_temp_res, type = c(&quot;Box-Pierce&quot;, &quot;Ljung-Box&quot;)) ## ## Box-Pierce test ## ## data: MED_temp_res ## X-squared = 0.0079384, df = 1, p-value = 0.929 Los resultados de Box-Pierce, presentan p-values mayores a 0.9 (evidentemente por encima de 0.05), por lo tanto, no hay evidencia de autocorrelación significativa en los residuos de los modelos ARIMA y son independientes tanto para Valledupar, como para Medellín. 5.5.2 Predicciones forecast Ahora para comparar, se procede a predecir con la función forecast con un horizonte 30 días usando directamente cada una de las series de temperatura estudiadas: # Forecast ts Valledupar VUP_temp_pred &lt;- forecast(VUP_temp_2018_2019_ts, h = 30) VUP_temp_pred ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## 731 35.44583 33.43742 37.45424 32.37423 38.51742 ## 732 35.44583 33.29529 37.59637 32.15687 38.73479 ## 733 35.44583 33.16199 37.72967 31.95300 38.93866 ## 734 35.44583 33.03605 37.85561 31.76039 39.13127 ## 735 35.44583 32.91637 37.97528 31.57736 39.31430 ## 736 35.44583 32.80211 38.08955 31.40261 39.48905 ## 737 35.44583 32.69258 38.19907 31.23510 39.65655 ## 738 35.44583 32.58725 38.30441 31.07401 39.81765 ## 739 35.44583 32.48566 38.40599 30.91865 39.97301 ## 740 35.44583 32.38745 38.50421 30.76844 40.12322 ## 741 35.44583 32.29229 38.59937 30.62291 40.26875 ## 742 35.44583 32.19992 38.69173 30.48165 40.41001 ## 743 35.44583 32.11011 38.78155 30.34429 40.54737 ## 744 35.44583 32.02266 38.86900 30.21054 40.68112 ## 745 35.44583 31.93738 38.95428 30.08012 40.81154 ## 746 35.44583 31.85413 39.03753 29.95279 40.93887 ## 747 35.44583 31.77276 39.11890 29.82835 41.06330 ## 748 35.44583 31.69316 39.19850 29.70661 41.18505 ## 749 35.44583 31.61521 39.27645 29.58740 41.30426 ## 750 35.44583 31.53881 39.35284 29.47056 41.42109 ## 751 35.44583 31.46388 39.42777 29.35597 41.53569 ## 752 35.44583 31.39034 39.50132 29.24349 41.64816 ## 753 35.44583 31.31811 39.57355 29.13302 41.75864 ## 754 35.44583 31.24711 39.64454 29.02445 41.86721 ## 755 35.44583 31.17730 39.71435 28.91768 41.97398 ## 756 35.44583 31.10862 39.78304 28.81263 42.07902 ## 757 35.44583 31.04100 39.85066 28.70922 42.18244 ## 758 35.44583 30.97440 39.91725 28.60737 42.28428 ## 759 35.44583 30.90879 39.98287 28.50702 42.38464 ## 760 35.44583 30.84411 40.04755 28.40810 42.48356 Aunque se obtienen predicciones / forecasting sin problemas, se puede apreciar fácilmente que el modelo pronostica para la temperatura máxima diaria en Valledupar un valor constante de 35.4 ºC para todo el mes / 30 días siguientes. # Forecast ts Medellín MED_temp_pred &lt;- forecast(MED_temp_2022_2023_ts, h = 30) MED_temp_pred ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## 731 28.32534 26.09965 30.55104 24.92143 31.72926 ## 732 28.32534 26.03224 30.61845 24.81834 31.83235 ## 733 28.32534 25.96675 30.68394 24.71819 31.93250 ## 734 28.32534 25.90304 30.74765 24.62075 32.02994 ## 735 28.32534 25.84096 30.80973 24.52580 32.12489 ## 736 28.32534 25.78039 30.87030 24.43317 32.21752 ## 737 28.32534 25.72123 30.92946 24.34270 32.30799 ## 738 28.32534 25.66339 30.98730 24.25423 32.39646 ## 739 28.32534 25.60677 31.04392 24.16765 32.48304 ## 740 28.32534 25.55132 31.09937 24.08283 32.56786 ## 741 28.32534 25.49694 31.15375 23.99968 32.65101 ## 742 28.32534 25.44360 31.20709 23.91809 32.73259 ## 743 28.32534 25.39122 31.25947 23.83799 32.81270 ## 744 28.32534 25.33977 31.31092 23.75930 32.89139 ## 745 28.32534 25.28918 31.36151 23.68193 32.96876 ## 746 28.32534 25.23942 31.41127 23.60584 33.04485 ## 747 28.32534 25.19046 31.46023 23.53095 33.11974 ## 748 28.32534 25.14224 31.50845 23.45721 33.19348 ## 749 28.32534 25.09475 31.55594 23.38458 33.26611 ## 750 28.32534 25.04794 31.60275 23.31299 33.33770 ## 751 28.32534 25.00180 31.64889 23.24242 33.40827 ## 752 28.32534 24.95628 31.69441 23.17281 33.47788 ## 753 28.32534 24.91138 31.73931 23.10413 33.54656 ## 754 28.32534 24.86705 31.78364 23.03634 33.61435 ## 755 28.32534 24.82329 31.82740 22.96941 33.68128 ## 756 28.32534 24.78006 31.87063 22.90330 33.74739 ## 757 28.32534 24.73736 31.91333 22.83800 33.81269 ## 758 28.32534 24.69516 31.95553 22.77346 33.87723 ## 759 28.32534 24.65344 31.99725 22.70966 33.94103 ## 760 28.32534 24.61220 32.03849 22.64657 34.00411 Al igual que con Valledupar, los pronósticos de Medellín son constantes en 28.3 ºC para todo el horizonte de 30 días solicitado al modelo. Para finalizar, a continuación se grafican con plot las predicciones encontradas para Valledupar y Medellín: # Plot forecast Valledupar plot(VUP_temp_pred, col = &quot;orange&quot;, main=&quot;Forecast Temperatura máxima Valledupar&quot;, xlab=&quot;Tiempo / Día&quot;, ylab=&quot;Temperatura [°C]&quot;) abline(h = mean(VUP_temp_2018_2019), col = &quot;red&quot;, lty = &quot;dotted&quot;) Como era de esperar, se obtiene una línea horizontal de la predicción que no varía par Valledupar alrededor de los 35 grados Celsius. # Plot forecast Medellín plot(MED_temp_pred, col = &quot;lightgreen&quot;, main=&quot;Forecast Temperatura máxima Medellín&quot;, xlab=&quot;Tiempo / Día&quot;, ylab=&quot;Temperatura [°C]&quot;) abline(h = mean(MED_temp_2022_2023), col = &quot;purple&quot;, lty = &quot;dotted&quot;) La gráfica anterior presenta el pronóstico para Medellín que como se ha calculado, se encuentra cerca de los 28 ºC. 5.5.3 Verificación valores atípicos Para terminar, con la función tso de la librería tsoutliers, se validan los ARIMA y grafican los efectos de los valores atípicos / outliers en las series: # Outliers Valledupar VUP_temp_outliers &lt;- tso(VUP_temp_2018_2019_ts) VUP_temp_outliers ## Series: VUP_temp_2018_2019_ts ## Regression with ARIMA(1,0,1) errors ## ## Coefficients: ## ar1 ma1 intercept TC226 AO555 TC593 ## 0.9255 -0.5371 35.5162 -6.8913 -7.6706 -5.7097 ## s.e. 0.0193 0.0469 0.3310 1.3540 1.3296 1.3545 ## ## sigma^2 = 2.152: log likelihood = -1312.92 ## AIC=2639.84 AICc=2639.99 BIC=2671.99 ## ## Outliers: ## type ind time coefhat tstat ## 1 TC 226 226 -6.891 -5.090 ## 2 AO 555 555 -7.671 -5.769 ## 3 TC 593 593 -5.710 -4.215 plot(VUP_temp_outliers, args.lines.y = list(col = &quot;orange&quot;), args.lines.yadj = list(col = &quot;orangered&quot;)) En el caso de Valledupar, la función tso encuentra tres outliers, mientras como se aprecia a continuación para Medellín solamente uno. Ahora, tso encuentra el ajuste de la serie de Valledupar sin atípicos en ARIMA(1,0,1) y para Medellín en ARIMA(1,1,1). # Outliers Medellín MED_temp_outliers &lt;- tso(MED_temp_2022_2023_ts) MED_temp_outliers ## Series: MED_temp_2022_2023_ts ## Regression with ARIMA(1,1,1) errors ## ## Coefficients: ## ar1 ma1 AO50 ## 0.3442 -0.9407 -7.1941 ## s.e. 0.0452 0.0225 1.5369 ## ## sigma^2 = 2.78: log likelihood = -1406.29 ## AIC=2820.58 AICc=2820.63 BIC=2838.94 ## ## Outliers: ## type ind time coefhat tstat ## 1 AO 50 50 -7.194 -4.681 plot(MED_temp_outliers, args.lines.y = list(col = &quot;lightgreen&quot;), args.lines.yadj = list(col = &quot;darkgreen&quot;)) Ahora se realizan las predicciones con forecast, usando auto.arima con las series ajustadas sin outliers con tso: # Forecast ts Valledupar VUP_temp_order &lt;- auto.arima(VUP_temp_outliers$yadj) VUP_temp_tso &lt;- forecast(VUP_temp_order, h = 30) VUP_temp_tso ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## 731 35.47045 33.60325 37.33766 32.61481 38.32609 ## 732 35.40387 33.39455 37.41320 32.33087 38.47688 ## 733 35.48766 33.36300 37.61232 32.23828 38.73704 ## 734 35.49972 33.31234 37.68711 32.15440 38.84505 ## 735 35.51322 33.27777 37.74867 32.09440 38.93204 ## 736 35.51765 33.24397 37.79133 32.04036 38.99494 ## 737 35.51996 33.21346 37.82647 31.99247 39.04746 ## 738 35.52056 33.18504 37.85608 31.94868 39.09243 ## 739 35.52045 33.15875 37.88216 31.90853 39.13238 ## 740 35.51996 33.13438 37.90555 31.87153 39.16840 ## 741 35.51930 33.11181 37.92679 31.83736 39.20124 ## 742 35.51856 33.09089 37.94623 31.80576 39.23136 ## 743 35.51779 33.07151 37.96408 31.77652 39.25907 ## 744 35.51703 33.05353 37.98052 31.74943 39.28462 ## 745 35.51627 33.03685 37.99569 31.72433 39.30822 ## 746 35.51554 33.02138 38.00970 31.70105 39.33003 ## 747 35.51483 33.00701 38.02265 31.67945 39.35021 ## 748 35.51414 32.99366 38.03462 31.65939 39.36889 ## 749 35.51347 32.98125 38.04570 31.64077 39.38618 ## 750 35.51283 32.96971 38.05595 31.62346 39.40220 ## 751 35.51221 32.95898 38.06544 31.60738 39.41704 ## 752 35.51161 32.94899 38.07422 31.59243 39.43079 ## 753 35.51103 32.93970 38.08236 31.57852 39.44354 ## 754 35.51047 32.93105 38.08990 31.56558 39.45536 ## 755 35.50993 32.92299 38.09688 31.55354 39.46632 ## 756 35.50941 32.91547 38.10334 31.54233 39.47649 ## 757 35.50891 32.90848 38.10934 31.53189 39.48592 ## 758 35.50842 32.90195 38.11489 31.52217 39.49467 ## 759 35.50795 32.89587 38.12004 31.51311 39.50279 ## 760 35.50750 32.89019 38.12481 31.50467 39.51033 Tal como en las Predicciones ARIMA, para Valledupar se obtienen predicciones ajustadas con tso muy cercanas (35.40 y 35.52 ºC, con variación de 0.12 ºC) y un valor promedio de 35.51 ºC. Como se puede ver a continuación, para Medellín también se obtienen valores cercanos entre ellos (28.57 ºC - 28.84 ºC), con una variación de 0.27 ºC entre el mínimo y el máximo pronósticado. El promedio de las predicciones en este caso es de 28.76 ºC. # Forecast ts Medellín MED_temp_order &lt;- auto.arima(MED_temp_outliers$yadj) MED_temp_tso &lt;- forecast(MED_temp_order, h = 30) MED_temp_tso ## Point Forecast Lo 80 Hi 80 Lo 95 Hi 95 ## 731 28.64836 26.52477 30.77195 25.40062 31.89611 ## 732 28.74427 26.47584 31.01271 25.27500 32.21354 ## 733 28.56859 26.25180 30.88538 25.02537 32.11181 ## 734 28.78553 26.44474 31.12633 25.20559 32.36547 ## 735 28.61834 26.24962 30.98705 24.99570 32.24097 ## 736 28.81121 26.42916 31.19325 25.16818 32.45423 ## 737 28.65393 26.25444 31.05341 24.98423 32.32362 ## 738 28.82656 26.41902 31.23409 25.14455 32.50856 ## 739 28.67979 26.26050 31.09908 24.97980 32.37978 ## 740 28.83512 26.41052 31.25971 25.12701 32.54322 ## 741 28.69894 26.26581 31.13206 24.97780 32.42008 ## 742 28.83925 26.40230 31.27620 25.11226 32.56624 ## 743 28.71341 26.26986 31.15695 24.97633 32.45049 ## 744 28.84054 26.39400 31.28708 25.09888 32.58220 ## 745 28.72459 26.27266 31.17653 24.97468 32.47451 ## 746 28.84004 26.38559 31.29450 25.08628 32.59381 ## 747 28.73344 26.27436 31.19252 24.97260 32.49428 ## 748 28.83846 26.37714 31.29978 25.07419 32.60273 ## 749 28.74060 26.27517 31.20603 24.97005 32.51115 ## 750 28.83625 26.36874 31.30376 25.06251 32.60999 ## 751 28.74652 26.27526 31.21778 24.96705 32.52599 ## 752 28.83372 26.36046 31.30697 25.05119 32.61624 ## 753 28.75151 26.27476 31.22826 24.96364 32.53938 ## 754 28.83105 26.35235 31.30976 25.04020 32.62190 ## 755 28.75578 26.27377 31.23780 24.95988 32.55169 ## 756 28.82839 26.34444 31.31233 25.02952 32.62725 ## 757 28.75950 26.27239 31.24661 24.95579 32.56321 ## 758 28.82579 26.33675 31.31483 25.01913 32.63245 ## 759 28.76277 26.27067 31.25486 24.95143 32.57410 ## 760 28.82331 26.32927 31.31735 25.00901 32.63762 Y como se realizado con los modelos anteriores, se grafican las predicciones sin outliers / tso con plot: # Plot tso Valledupar plot(VUP_temp_tso, col = &quot;orange&quot;, main=&quot;Predicción TSO Temperatura máxima Valledupar&quot;, xlab=&quot;Tiempo / Día&quot;, ylab=&quot;Temperatura [°C]&quot;) abline(h = mean(VUP_temp_2018_2019), col = &quot;red&quot;, lty = &quot;dotted&quot;) # Plot tso Medellín plot(MED_temp_tso, col = &quot;lightgreen&quot;, main=&quot;Predicción TSO Temperatura máxima Medellín&quot;, xlab=&quot;Tiempo / Día&quot;, ylab=&quot;Temperatura [°C]&quot;) abline(h = mean(MED_temp_2022_2023), col = &quot;purple&quot;, lty = &quot;dotted&quot;) 5.6 Observaciones predicciones En este caso, las predicciones se realizaron sin problemas, pero los valores / forecasts encontrados por los modelos fueron los más “simple” que corresponden prácticamente a la media / promedio de cada serie: - Pronósticos de ~35.48, 35.45 y ~35.51 ºC en Valledupar contra la media de 35.48 ºC de la serie. - Pronósticos de ~28.79, 28.33 y ~28.76 ºC en Medellín contra la media de 27.93 ºC de la serie. Los anteriores resultados, nos llevarían a explorar otros métodos de pronóstico para la temperatura máxima diaria. "],["referencias.html", "Referencias", " Referencias IDEAM - Instituto de Hidrología, Meteorología y Estudios Ambientales. 2012. «Características climatológicas de ciudades principales y municipios turisticos». http://www.ideam.gov.co/web/entidad/acerca-entidad. ———. 2021. «Banco de Datos del IDEAM - DHIME». http://dhime.ideam.gov.co/atencionciudadano/. ———. 2024. «Acerca de la Entidad». http://www.ideam.gov.co/web/entidad/acerca-entidad. MINTIC - Ministerio de Tecnologías de la Información y las Comunicaciones. 2024. «Datos Abiertos Colombia». la plataforma de datos abiertos del gobierno colombiano. https://www.datos.gov.co/. OMM - Organización Meteorológica Mundial. 2024. «Día Meteorológico Mundial de 2024». Organización Meteorológica Mundial. https://wmo.int/es/site/dia-meteorologico-mundial-de-2024. OMS - Organización Mundial de la Salud. 2021. «Cambio climático». https://www.who.int/es/news-room/fact-sheets/detail/climate-change-and-health. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
