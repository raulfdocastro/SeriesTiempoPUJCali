[["estructura-de-las-series-de-tiempo.html", "Capítulo 2 Estructura de las series de tiempo 2.1 Variables a analizar 2.2 Conjunto de datos 2.3 Datos faltantes", " Capítulo 2 Estructura de las series de tiempo 2.1 Variables a analizar Las variables a analizar en el proyecto son las siguientes: Temperatura máxima diaria Temperatura mínima diaria Precipitación total diaria (automática) 2.2 Conjunto de datos Del Banco de Datos en línea DHIME (IDEAM - Instituto de Hidrología, Meteorología y Estudios Ambientales 2021) se descargaron los datasets disponibles de las variables anteriores para las estaciones en el departamento del Cesar y el municipio de Valledupar con registros diarios entre los años 2018 al 2023. Para el análisis inicial se usarán las siguientes librerías: # Análisis datos library(dplyr) library(readr) library(tidyr) library(stats) # Series tiempo library(changepoint) #library(fGarch) library(forecast) library(lubridate) library(timsac) library(tseries) library(xts) library(zoo) # Visualización library(dygraphs) library(ggplot2) library(ggfortify) library(quantmod) Se proceden a cargar / leer los zips / datasets descargados: # Datasets IDEAM zip_temp_max &lt;- &quot;data/DHIME-IDEAM_Cesar_Temperatura máxima diaria_2018-2023.zip&quot; zip_temp_min &lt;- &quot;data/DHIME-IDEAM_Cesar_Temperatura mínima diaria_2018-2023.zip&quot; zip_rain &lt;- &quot;data/DHIME-IDEAM_Cesar_Precipitación total diaria (automática)_2018-2023.zip&quot; # Dataframes df_temp_max &lt;- read_csv(unzip(zip_temp_max, files = &quot;excel.csv.csv&quot;), col_select = c(CodigoEstacion, Fecha, Valor)) df_temp_min &lt;- read_csv(unzip(zip_temp_min, files = &quot;excel.csv.csv&quot;), col_select = c(CodigoEstacion, Fecha, Valor)) df_rain &lt;- read_csv(unzip(zip_rain, files = &quot;excel.csv.csv&quot;), col_select = c(CodigoEstacion, Fecha, Valor)) # Conversión Fecha a Date df_temp_max$Fecha &lt;- as.Date(df_temp_max$Fecha) df_temp_min$Fecha &lt;- as.Date(df_temp_min$Fecha) df_rain$Fecha &lt;- as.Date(df_rain$Fecha) # Summary glimpse(df_temp_max) ## Rows: 5,910 ## Columns: 3 ## $ CodigoEstacion &lt;dbl&gt; 28025502, 28025502, 28025502, 28025502, 28025502, 28025… ## $ Fecha &lt;date&gt; 2018-01-01, 2018-01-02, 2018-01-03, 2018-01-04, 2018-0… ## $ Valor &lt;dbl&gt; 34.2, 32.3, 33.5, 33.4, 32.8, 34.2, 33.9, 34.8, 34.4, 3… str(df_temp_min) ## tibble [5,788 × 3] (S3: tbl_df/tbl/data.frame) ## $ CodigoEstacion: num [1:5788] 2.8e+07 2.8e+07 2.8e+07 2.8e+07 2.8e+07 ... ## $ Fecha : Date[1:5788], format: &quot;2018-01-01&quot; &quot;2018-01-02&quot; ... ## $ Valor : num [1:5788] 22.8 23.2 22.6 23.1 22.2 22.6 24.7 23.6 21.4 23.4 ... ## - attr(*, &quot;spec&quot;)= ## .. cols( ## .. CodigoEstacion = col_double(), ## .. NombreEstacion = col_skip(), ## .. Latitud = col_skip(), ## .. Longitud = col_skip(), ## .. Altitud = col_skip(), ## .. Categoria = col_skip(), ## .. Entidad = col_skip(), ## .. AreaOperativa = col_skip(), ## .. Departamento = col_skip(), ## .. Municipio = col_skip(), ## .. FechaInstalacion = col_skip(), ## .. FechaSuspension = col_skip(), ## .. IdParametro = col_skip(), ## .. Etiqueta = col_skip(), ## .. DescripcionSerie = col_skip(), ## .. Frecuencia = col_skip(), ## .. Fecha = col_datetime(format = &quot;&quot;), ## .. Valor = col_double(), ## .. Grado = col_skip(), ## .. Calificador = col_skip(), ## .. NivelAprobacion = col_skip() ## .. ) summary(df_rain) ## CodigoEstacion Fecha Valor ## Min. :28025502 Min. :2018-01-01 Min. : 0.000 ## 1st Qu.:28025502 1st Qu.:2019-05-13 1st Qu.: 0.000 ## Median :28025502 Median :2020-09-22 Median : 0.000 ## Mean :28030069 Mean :2020-09-23 Mean : 7.078 ## 3rd Qu.:28035060 3rd Qu.:2022-02-01 3rd Qu.: 0.000 ## Max. :28035060 Max. :2023-09-10 Max. :720.000 # Estaciones unique(df_temp_max$CodigoEstacion) ## [1] 28025502 28035020 28035040 28035010 unique(df_temp_min$CodigoEstacion) ## [1] 28025502 28035020 28035040 28035010 unique(df_rain$CodigoEstacion) ## [1] 28025502 28035060 Se pasan las estaciones y sus datos a columnas: # Pivot df por estación df_temp_max_pivot &lt;- df_temp_max %&gt;% pivot_wider(names_from = CodigoEstacion, values_from = Valor, names_prefix = &quot;Est_&quot;) df_temp_min_pivot &lt;- df_temp_min %&gt;% pivot_wider(names_from = CodigoEstacion, values_from = Valor, names_prefix = &quot;Est_&quot;) df_rain_pivot &lt;- df_rain %&gt;% pivot_wider(names_from = CodigoEstacion, values_from = Valor, names_prefix = &quot;Est_&quot;) # Encabezado datos head(df_temp_max_pivot) ## # A tibble: 6 × 5 ## Fecha Est_28025502 Est_28035020 Est_28035040 Est_28035010 ## &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2018-01-01 34.2 NA 35.6 36.8 ## 2 2018-01-02 32.3 NA 35.4 32.8 ## 3 2018-01-03 33.5 NA 37 34.6 ## 4 2018-01-04 33.4 NA 33.8 32.6 ## 5 2018-01-05 32.8 NA 35 34.2 ## 6 2018-01-06 34.2 NA 35.6 36.8 head(df_temp_min_pivot) ## # A tibble: 6 × 5 ## Fecha Est_28025502 Est_28035020 Est_28035040 Est_28035010 ## &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2018-01-01 22.8 NA 24.8 23.2 ## 2 2018-01-02 23.2 NA 24.6 23 ## 3 2018-01-04 22.6 NA 24.2 22.4 ## 4 2018-01-06 23.1 NA 24 22.6 ## 5 2018-01-07 22.2 NA 24.6 22.6 ## 6 2018-01-09 22.6 NA 23 23.8 head(df_rain_pivot) ## # A tibble: 6 × 3 ## Fecha Est_28025502 Est_28035060 ## &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2018-01-01 0 0 ## 2 2018-01-02 28.0 44.1 ## 3 2018-01-03 1.15 3.2 ## 4 2018-01-04 0 0 ## 5 2018-01-05 13.2 4.6 ## 6 2018-01-06 0.01 0 Se evidencian días faltantes en los dataframes por lo que se verifican y completan de ser necesario: # df días completos 2018-2023 dias_2018_2023 &lt;- data.frame(Fecha = seq.Date(from = as.Date(&quot;2018-01-01&quot;), to = as.Date(&quot;2023-12-31&quot;), by = &quot;day&quot;)) # Join días completos df_temp_max_na &lt;- left_join(dias_2018_2023, df_temp_max_pivot, by = &quot;Fecha&quot;) df_temp_min_na &lt;- left_join(dias_2018_2023, df_temp_min_pivot, by = &quot;Fecha&quot;) df_rain_na &lt;- left_join(dias_2018_2023, df_rain_pivot, by = &quot;Fecha&quot;) # Encabezado datos head(df_temp_max_na) ## Fecha Est_28025502 Est_28035020 Est_28035040 Est_28035010 ## 1 2018-01-01 34.2 NA 35.6 36.8 ## 2 2018-01-02 32.3 NA 35.4 32.8 ## 3 2018-01-03 33.5 NA 37.0 34.6 ## 4 2018-01-04 33.4 NA 33.8 32.6 ## 5 2018-01-05 32.8 NA 35.0 34.2 ## 6 2018-01-06 34.2 NA 35.6 36.8 head(df_temp_min_na) ## Fecha Est_28025502 Est_28035020 Est_28035040 Est_28035010 ## 1 2018-01-01 22.8 NA 24.8 23.2 ## 2 2018-01-02 23.2 NA 24.6 23.0 ## 3 2018-01-03 NA NA 23.3 22.2 ## 4 2018-01-04 22.6 NA 24.2 22.4 ## 5 2018-01-05 NA NA 24.0 23.0 ## 6 2018-01-06 23.1 NA 24.0 22.6 head(df_rain_na) ## Fecha Est_28025502 Est_28035060 ## 1 2018-01-01 0.00 0.0 ## 2 2018-01-02 27.97 44.1 ## 3 2018-01-03 1.15 3.2 ## 4 2018-01-04 0.00 0.0 ## 5 2018-01-05 13.21 4.6 ## 6 2018-01-06 0.01 0.0 Se crean las series de tiempo: # Creación series de tiempo con xts (adecuada para datos diarios con años bisiestos, ts es una frecuencia fija) df_temp_max_ts = xts(df_temp_max_na[,-1], order.by = df_temp_max_na$Fecha) df_temp_min_ts = xts(df_temp_min_na[,-1], order.by = df_temp_min_na$Fecha) df_rain_ts = xts(df_rain_na[,-1], order.by = df_rain_na$Fecha) # Dataframes xts head(df_temp_max_ts) ## Est_28025502 Est_28035020 Est_28035040 Est_28035010 ## 2018-01-01 34.2 NA 35.6 36.8 ## 2018-01-02 32.3 NA 35.4 32.8 ## 2018-01-03 33.5 NA 37.0 34.6 ## 2018-01-04 33.4 NA 33.8 32.6 ## 2018-01-05 32.8 NA 35.0 34.2 ## 2018-01-06 34.2 NA 35.6 36.8 class(df_temp_max_ts) ## [1] &quot;xts&quot; &quot;zoo&quot; head(df_temp_min_ts) ## Est_28025502 Est_28035020 Est_28035040 Est_28035010 ## 2018-01-01 22.8 NA 24.8 23.2 ## 2018-01-02 23.2 NA 24.6 23.0 ## 2018-01-03 NA NA 23.3 22.2 ## 2018-01-04 22.6 NA 24.2 22.4 ## 2018-01-05 NA NA 24.0 23.0 ## 2018-01-06 23.1 NA 24.0 22.6 class(df_temp_min_ts) ## [1] &quot;xts&quot; &quot;zoo&quot; head(df_rain_ts) ## Est_28025502 Est_28035060 ## 2018-01-01 0.00 0.0 ## 2018-01-02 27.97 44.1 ## 2018-01-03 1.15 3.2 ## 2018-01-04 0.00 0.0 ## 2018-01-05 13.21 4.6 ## 2018-01-06 0.01 0.0 class(df_rain_ts) ## [1] &quot;xts&quot; &quot;zoo&quot; # Gráficas series de tiempo # plot(df_temp_max_ts, main=&quot;Temperatura máxima&quot;) dygraph(df_temp_max_ts, main=&quot;Temperatura máxima&quot;) %&gt;% dyAxis(&quot;x&quot;, label = &quot;Fecha&quot;) %&gt;% dyAxis(&quot;y&quot;, label = &quot;Temperatura (°C)&quot;) # chart_Series(df_temp_min_ts, main=&quot;Temperatura mínima&quot;) dygraph(df_temp_min_ts, main=&quot;Temperatura mínima&quot;) %&gt;% dyAxis(&quot;x&quot;, label = &quot;Fecha&quot;) %&gt;% dyAxis(&quot;y&quot;, label = &quot;Temperatura (°C)&quot;) # autoplot(df_rain_ts, main=&quot;Precipitación acumulada&quot;) dygraph(df_rain_ts, main=&quot;Precipitación acumulada&quot;) %&gt;% dyAxis(&quot;x&quot;, label = &quot;Fecha&quot;) %&gt;% dyAxis(&quot;y&quot;, label = &quot;Precipitación (mm)&quot;) 2.3 Datos faltantes Como se puede apreciar en las gráficas anteriores, se presentan vacíos en las series; por lo que se procede a cuantificar los datos faltantes (NA) por cada estación y variable. # Suma NA colSums(is.na(df_temp_max_ts)) ## Est_28025502 Est_28035020 Est_28035040 Est_28035010 ## 1370 68 822 594 colSums(is.na(df_temp_min_ts)) ## Est_28025502 Est_28035020 Est_28035040 Est_28035010 ## 1407 68 720 781 colSums(is.na(df_rain_ts)) ## Est_28025502 Est_28035060 ## 112 289 Referencias "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
