[["propuesta.html", "Capítulo 1 Propuesta Bookdown Grupo 7 1.1 Tipo de datos 1.2 Importancia del pronóstico 1.3 Fuente de datos 1.4 Consideraciones finales", " Universidad Javeriana Cali Maestría en Ciencia de Datos Análisis de Series de Tiempo - 20241 - B M1U1 Actividad 1 - Propuesta Bookdown Joan Sebastián García Villa Laura Yohanna Bermúdez Murillo Raúl Fernando Castro Suárez Mayo 2024 Capítulo 1 Propuesta Bookdown Grupo 7 1.1 Tipo de datos En el presente proyecto se propone analizar datos meteorológicos, en particular los parámetros de precipitación y temperatura ambiente para Colombia. 1.2 Importancia del pronóstico La Organización Mundial de la Salud (OMS) han dejado claro que el cambio climático constituye una amenaza muy grave para la salud humana, afectando tanto a los sistemas naturales y humanos. Este fenómeno es un multiplicador de amenazas que podría revertir décadas de avances en salud. Últimamente se observan fenómenos meteorológicos y climáticos más frecuentes e intensos, como tormentas, calor extremo, sequías e incendios que aumentan el riesgo de mortalidad, enfermedades y emergencias de salud (OMS - Organización Mundial de la Salud 2021). La Organización Meteorológica Mundial (OMM) celebró este año del Día Meteorológico Mundial llamándonos a estar “a la vanguardia de la acción por el clima” lo cual le apunta a los Objetivos de Desarrollo Sostenible, en dónde es claro para la entidad que las predicciones climáticas y meteorológicas son cruciales para mejorar la producción alimentaria, así como gestionar la enfermedades sensibles al clima y generar sistemas de alertas tempranas (OMM - Organización Meteorológica Mundial 2024). 1.3 Fuente de datos En Colombia, el Instituto de Hidrología, Meteorología y Estudios Ambientales (IDEAM) es la institución de apoyo técnico y científico al Sistema Nacional Ambiental, que tiene como misión producir información confiable sobre el estado de los recursos naturales y el medio ambiente (IDEAM - Instituto de Hidrología, Meteorología y Estudios Ambientales 2024). El IDEAM cuenta con un Banco de Datos en línea (DHIME) (IDEAM - Instituto de Hidrología, Meteorología y Estudios Ambientales 2021) del cual se pueden descargar series de tiempo de los diferentes parámetros y variables que mide la entidad con sus estaciones hidrometeorológicas en los diferentes departamentos y municipios del país. De la misma manera, en la Plataforma Nacional de Datos Abiertos de Colombia (MINTIC - Ministerio de Tecnologías de la Información y las Comunicaciones 2024) se cuentan con conjuntos de datos (tanto del IDEAM, como de otras entidades) de precipitación y de temperatura para descargar o consumir por medio de API. A continuación se pueden apreciar pantallazos con una muestra de datos de temperatura obtenidos del IDEAM y de precipitación de Datos Abiertos: Figura 1.1: Muestra datos temperatura IDEAM Figura 1.2: Muestra datos precipitación Datos Abiertos 1.4 Consideraciones finales En la presente propuesta se han presentado fuentes confiables de datos para el proyecto y se ha descrito la importancia de las variables a analizar, especialmente en un contexto de cambio climático, por lo tanto, es claro que predecir o pronosticar series de tiempo como la precipitación y la temperatura en el país es relevante por su importancia en la salud; su impacto en otras áreas como la agricultura, la gestión de riesgos naturales (p.ej. incendios) e incluso para el turismo. Referencias ———. 2021. «Banco de Datos del IDEAM - DHIME». http://dhime.ideam.gov.co/atencionciudadano/. ———. 2024. «Acerca de la Entidad». http://www.ideam.gov.co/web/entidad/acerca-entidad. MINTIC - Ministerio de Tecnologías de la Información y las Comunicaciones. 2024. «Datos Abiertos Colombia». la plataforma de datos abiertos del gobierno colombiano. https://www.datos.gov.co/. OMM - Organización Meteorológica Mundial. 2024. «Día Meteorológico Mundial de 2024». Organización Meteorológica Mundial. https://wmo.int/es/site/dia-meteorologico-mundial-de-2024. OMS - Organización Mundial de la Salud. 2021. «Cambio climático». https://www.who.int/es/news-room/fact-sheets/detail/climate-change-and-health. "],["estructura-de-las-series-de-tiempo.html", "Capítulo 2 Estructura de las series de tiempo 2.1 Variables a analizar 2.2 Conjunto de datos 2.3 Series de tiempo 2.4 Datos faltantes 2.5 Análisis exploratorio 2.6 Observaciones finales", " Capítulo 2 Estructura de las series de tiempo En el presente capítulo se revisa la estructura de las series de tiempo por medio de un análisis exploratorio de los datos. 2.1 Variables a analizar Las variables a analizar en el proyecto son las siguientes: Temperatura máxima diaria Precipitación total diaria (automática) 2.2 Conjunto de datos Del Banco de Datos en línea DHIME (IDEAM - Instituto de Hidrología, Meteorología y Estudios Ambientales 2021) se descargaron los datasets disponibles de las variables anteriores para estaciones en las ciudades de Bogotá, Medellín y Valledupar con registros diarios entre los años 2018 al 2023. Las estaciones IDEAM seleccionadas para el estudio son las siguientes: Bogotá / BOG: UNIVERSIDAD NACIONAL [21205012] Medellín / MED: AEROPUERTO OLAYA HERRERA - AUT [27015330] Valledupar / VUP: AEROPUERTO ALFONSO LOPEZ - [28025502] Las estaciones en mención se escogieron por contar con la mayor cantidad de datos en el periodo seleccionado para el estudio. Para el análisis inicial se usarán las siguientes librerías: # Análisis datos library(dplyr) library(readr) library(tidyr) library(stats) # Series tiempo library(changepoint) #library(fGarch) library(forecast) library(lubridate) library(plotly) library(timsac) library(tseries) library(xts) library(zoo) # Visualización library(dygraphs) # library(kableExtra) library(ggplot2) library(ggfortify) library(quantmod) Se proceden a cargar / leer los zips / datasets descargados: # Datasets IDEAM zip_temp_max &lt;- &quot;data/DHIME-IDEAM_Temperatura máxima diaria_2018-2023.zip&quot; zip_rain &lt;- &quot;data/DHIME-IDEAM_Precipitación total diaria (automática)_2018-2023.zip&quot; # Dataframes df_temp_max &lt;- read_csv(unzip(zip_temp_max, files = &quot;excel.csv.csv&quot;), col_select = c(CodigoEstacion, Fecha, Valor)) df_rain &lt;- read_csv(unzip(zip_rain, files = &quot;excel.csv.csv&quot;), col_select = c(CodigoEstacion, Fecha, Valor)) # Conversión Fecha a Date df_temp_max$Fecha &lt;- as.Date(df_temp_max$Fecha) df_rain$Fecha &lt;- as.Date(df_rain$Fecha) # Descripción de los datos glimpse(df_temp_max) ## Rows: 2,769 ## Columns: 3 ## $ CodigoEstacion &lt;dbl&gt; 27015330, 27015330, 27015330, 27015330, 27015330, 27015… ## $ Fecha &lt;date&gt; 2018-01-01, 2018-01-02, 2018-01-03, 2018-01-04, 2018-0… ## $ Valor &lt;dbl&gt; 26.3, 25.6, 28.7, 27.4, 25.8, 28.0, 27.6, 28.2, 22.6, 2… str(df_temp_max) ## tibble [2,769 × 3] (S3: tbl_df/tbl/data.frame) ## $ CodigoEstacion: num [1:2769] 2.7e+07 2.7e+07 2.7e+07 2.7e+07 2.7e+07 ... ## $ Fecha : Date[1:2769], format: &quot;2018-01-01&quot; &quot;2018-01-02&quot; ... ## $ Valor : num [1:2769] 26.3 25.6 28.7 27.4 25.8 28 27.6 28.2 22.6 27.8 ... ## - attr(*, &quot;spec&quot;)= ## .. cols( ## .. CodigoEstacion = col_double(), ## .. NombreEstacion = col_skip(), ## .. Latitud = col_skip(), ## .. Longitud = col_skip(), ## .. Altitud = col_skip(), ## .. Categoria = col_skip(), ## .. Entidad = col_skip(), ## .. AreaOperativa = col_skip(), ## .. Departamento = col_skip(), ## .. Municipio = col_skip(), ## .. FechaInstalacion = col_skip(), ## .. FechaSuspension = col_skip(), ## .. IdParametro = col_skip(), ## .. Etiqueta = col_skip(), ## .. DescripcionSerie = col_skip(), ## .. Frecuencia = col_skip(), ## .. Fecha = col_datetime(format = &quot;&quot;), ## .. Valor = col_double(), ## .. Grado = col_skip(), ## .. Calificador = col_skip(), ## .. NivelAprobacion = col_skip() ## .. ) # Estaciones unique(df_temp_max$CodigoEstacion) ## [1] 27015330 21205012 28025502 unique(df_rain$CodigoEstacion) ## [1] 27015330 21205012 28025502 Se pasan las estaciones y sus datos a columnas: # Pivot df por estación df_temp_max_pivot &lt;- df_temp_max %&gt;% pivot_wider(names_from = CodigoEstacion, values_from = Valor, names_prefix = &quot;Est_&quot;) df_rain_pivot &lt;- df_rain %&gt;% pivot_wider(names_from = CodigoEstacion, values_from = Valor, names_prefix = &quot;Est_&quot;) # Encabezado datos head(df_temp_max_pivot) ## # A tibble: 6 × 4 ## Fecha Est_27015330 Est_21205012 Est_28025502 ## &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2018-01-01 26.3 NA 34.2 ## 2 2018-01-02 25.6 NA 32.3 ## 3 2018-01-03 28.7 NA 33.5 ## 4 2018-01-04 27.4 NA 33.4 ## 5 2018-01-05 25.8 NA 32.8 ## 6 2018-01-06 28 NA 34.2 head(df_rain_pivot) ## # A tibble: 6 × 4 ## Fecha Est_27015330 Est_21205012 Est_28025502 ## &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2018-01-01 0.012 13.8 0 ## 2 2018-01-02 26.3 0.1 28.0 ## 3 2018-01-03 4.77 2.2 1.15 ## 4 2018-01-04 7.23 0 0 ## 5 2018-01-05 3.17 17.1 13.2 ## 6 2018-01-06 4.86 0.3 0.01 2.3 Series de tiempo Se verifican que los registros tengan todos los días del periodo seleccionado en los dataframes y completan con un join para todo el periodo de ser necesario: # df días completos 2018-2023 dias_2018_2023 &lt;- data.frame(Fecha = seq.Date(from = as.Date(&quot;2018-01-01&quot;), to = as.Date(&quot;2023-12-31&quot;), by = &quot;day&quot;)) # Join días completos df_temp_max_na &lt;- left_join(dias_2018_2023, df_temp_max_pivot, by = &quot;Fecha&quot;) df_rain_na &lt;- left_join(dias_2018_2023, df_rain_pivot, by = &quot;Fecha&quot;) Como se cuentan con años bisiestos, se crean las series de tiempo con xts: # Creación series de tiempo con xts (más adecuada para datos diarios con años bisiestos / frecuencias variables que ts) df_temp_max_ts = xts(df_temp_max_na[,-1], order.by = df_temp_max_na$Fecha) df_rain_ts = xts(df_rain_na[,-1], order.by = df_rain_na$Fecha) # Dataframes xts head(df_temp_max_ts) ## Est_27015330 Est_21205012 Est_28025502 ## 2018-01-01 26.3 NA 34.2 ## 2018-01-02 25.6 NA 32.3 ## 2018-01-03 28.7 NA 33.5 ## 2018-01-04 27.4 NA 33.4 ## 2018-01-05 25.8 NA 32.8 ## 2018-01-06 28.0 NA 34.2 class(df_temp_max_ts) ## [1] &quot;xts&quot; &quot;zoo&quot; head(df_rain_ts) ## Est_27015330 Est_21205012 Est_28025502 ## 2018-01-01 0.012 13.8 0.00 ## 2018-01-02 26.304 0.1 27.97 ## 2018-01-03 4.774 2.2 1.15 ## 2018-01-04 7.233 0.0 0.00 ## 2018-01-05 3.169 17.1 13.21 ## 2018-01-06 4.862 0.3 0.01 class(df_rain_ts) ## [1] &quot;xts&quot; &quot;zoo&quot; Se realizan gráficas iniciales con autoplot y dygraph de las series de tiempo creadas: # Se cambian y ordenan nombres de estaciones por ciudades para mejor asociación / entendimiento colnames(df_temp_max_ts) &lt;- c(&quot;MED&quot;, &quot;BOG&quot;, &quot;VUP&quot;) df_temp_max_ts &lt;- df_temp_max_ts[, sort(names(df_temp_max_ts))] colnames(df_rain_ts) &lt;- c(&quot;MED&quot;, &quot;BOG&quot;, &quot;VUP&quot;) df_rain_ts &lt;- df_rain_ts[, sort(names(df_rain_ts))] # Gráficas series de tiempo autoplot(df_temp_max_ts, main=&quot;Temperatura máxima&quot;) ## Warning: Removed 325 rows containing missing values or values outside the ## scale range (`geom_line()`). dygraph(df_temp_max_ts, main=&quot;Temperatura máxima&quot;) %&gt;% dyAxis(&quot;x&quot;, label = &quot;Fecha&quot;) %&gt;% dyAxis(&quot;y&quot;, label = &quot;Temperatura (°C)&quot;) Se puede apreciar claramente en las gráficas anteriores que no se cuentan con datos de temperatura en diferentes periodos para las tres estaciones, especialmente en los años 2020 y 2021 (pandemia). # Series de tiempo precipitación autoplot(df_rain_ts, main=&quot;Precipitación acumulada&quot;) ## Warning: Removed 547 rows containing missing values or values outside the ## scale range (`geom_line()`). dygraph(df_rain_ts, main=&quot;Precipitación acumulada&quot;) %&gt;% dyAxis(&quot;x&quot;, label = &quot;Fecha&quot;) %&gt;% dyAxis(&quot;y&quot;, label = &quot;Precipitación (mm)&quot;) Se puede observar también que los registros de precipitación no tienen vacíos en pandemia, aunque en Valledupar (estación 28025502) se evidencian registros muy altos en marzo 2022 (mayores a 700 mm de lluvia) 2.4 Datos faltantes Como se puede apreciar en las gráficas anteriores, se presentan vacíos en las series; por lo que se procede a cuantificar los datos faltantes (NA) por cada estación / ciudad y variable. # Suma NA colSums(is.na(df_temp_max_ts)) ## BOG MED VUP ## 1794 640 1370 colSums(is.na(df_rain_ts)) ## BOG MED VUP ## 228 207 112 Tal como se había observado gráficamente, las series de tiempo cuentan con datos faltantes / vacíos, lo cual es notorio al especialmente para la temperatura máxima diaria en Bogotá y Valledupar. 2.5 Análisis exploratorio Se inicia el análisis exploratorio obteniendo realizando un resumen estadístico con summary para cada una de las variables y ciudades estudiadas. # Summary summary(df_temp_max_ts) ## Index BOG MED VUP ## Min. :2018-01-01 Min. :14.20 Min. :20.60 Min. :27.80 ## 1st Qu.:2019-07-02 1st Qu.:19.80 1st Qu.:26.80 1st Qu.:34.40 ## Median :2020-12-31 Median :20.70 Median :28.20 Median :35.60 ## Mean :2020-12-31 Mean :20.56 Mean :28.09 Mean :35.53 ## 3rd Qu.:2022-07-01 3rd Qu.:21.60 3rd Qu.:29.60 3rd Qu.:36.90 ## Max. :2023-12-31 Max. :24.50 Max. :33.60 Max. :40.60 ## NA&#39;s :1794 NA&#39;s :640 NA&#39;s :1370 summary(df_rain_ts) ## Index BOG MED VUP ## Min. :2018-01-01 Min. : 0.00 Min. : 0.0000 Min. : 0.00 ## 1st Qu.:2019-07-02 1st Qu.: 0.00 1st Qu.: 0.0000 1st Qu.: 0.00 ## Median :2020-12-31 Median : 0.10 Median : 0.0445 Median : 0.00 ## Mean :2020-12-31 Mean : 2.02 Mean : 3.1828 Mean : 12.62 ## 3rd Qu.:2022-07-01 3rd Qu.: 1.40 3rd Qu.: 2.4678 3rd Qu.: 0.01 ## Max. :2023-12-31 Max. :48.50 Max. :58.4830 Max. :720.00 ## NA&#39;s :228 NA&#39;s :207 NA&#39;s :112 Se confirma con summary la cantidad de NA’s estimados anteriormente, mientras que las temperaturas mínimas y medias corresponden al tipo de ciudad estudiada (Bogotá fría, Medellín templada y Valledupar caliente). La precipitación total diaria promedio es menor en Bogotá, seguida por Medellín y se cuadriplica en Valledupar (es necesario analizar los validez / atipicidad de los altos registros de marzo 2022 que pueden afectan la media obtenida para dicha ciudad). 2.5.1 Boxplots Una forma gráfica de apreciar el rango de las variables analizadas se puedo lograr realizando diagramas de cajas con boxplot: # Boxplots temperatura boxplot(df_temp_max_ts, col=c(&quot;lightblue&quot;, &quot;lightgreen&quot;, &quot;orange&quot;), bg = &quot;aliceblue&quot;, main=&quot;Temperatura máxima diaria&quot;, ylab=&quot;Temperatura [°C]&quot;, xlab=&quot;Ciudad&quot;) Lo anterior confirma nuevamente el comportamiento de temperaturas de las ciudades acorde a su zona climática. # Boxplots lluvia boxplot(df_rain_ts, col=c(&quot;lightblue&quot;, &quot;lightgreen&quot;, &quot;orange&quot;), bg = &quot;aliceblue&quot;, main=&quot;Precipitación total diaria&quot;, ylab=&quot;Lluvia [mm]&quot;, xlab=&quot;Ciudad&quot;) Aunque la mayoría de los registros de precipitación normalmente son ceros (días sin lluvia), en el diagrama de cajas anterior, se observa que la estación en Valledupar es la que más cuenta con datos por fuera del rango intercuartílico. 2.5.2 Histogramas A continuación de se generan histogramas para la temperatura máxima y la precipitación total diaria con ggplot: # Se convierte xts en df y se hace pivot para ggplot df_temp_max_ts_pivot&lt;- as.data.frame(df_temp_max_ts) df_temp_max_ts_pivot &lt;- pivot_longer(df_temp_max_ts_pivot, cols = c(BOG, MED, VUP), names_to = &quot;Ciudad&quot;, values_to = &quot;Temperatura&quot;) # Histogramas temperatura city_colors = c(&quot;BOG&quot; = &quot;lightblue&quot;, &quot;MED&quot; = &quot;lightgreen&quot;, &quot;VUP&quot;= &quot;orange&quot;) ggplot(df_temp_max_ts_pivot, aes(x = Temperatura, fill = Ciudad)) + geom_histogram(binwidth = 1, position = &quot;dodge&quot;) + scale_fill_manual(values = city_colors) + labs(title = &quot;Histograma de temperaturas máximas diarias por ciudad&quot;, x = &quot;Temperatura&quot;, y = &quot;Frecuencia&quot;, fill = &quot;Ciudad&quot;) + theme_minimal() ## Warning: Removed 3804 rows containing non-finite outside the scale range ## (`stat_bin()`). A pesar de los alta cantidad de registros NA, los histogramas de temperatura corresponden a lo esperado, encontrando las temperaturas máximas de Bogotá entre los 14 y 25 grados Celsius, los de Medellín entre 20 y 34 °C y Valledupar entre 28 y 40 °C, notándose que la mayor frecuencia de registros en cerca de 20, 28 y 35 °C respectivamente. # Dataframes lluvia pivot df_rain_ts_pivot&lt;- as.data.frame(df_rain_ts) df_rain_ts_pivot &lt;- pivot_longer(df_rain_ts_pivot, cols = c(BOG, MED, VUP), names_to = &quot;Ciudad&quot;, values_to = &quot;Lluvia&quot;) # Histograma lluvia ggplot(df_rain_ts_pivot, aes(x = Lluvia, fill = Ciudad)) + geom_histogram(binwidth = 20, position = &quot;dodge&quot;) + scale_fill_manual(values = city_colors) + labs(title = &quot;Histograma de precipitaciones totales diarias por ciudad&quot;, x = &quot;Lluvia&quot;, y = &quot;Frecuencia&quot;, fill = &quot;Ciudad&quot;) + theme_minimal() ## Warning: Removed 547 rows containing non-finite outside the scale range ## (`stat_bin()`). Como se puede observar en el histograma anterior, en el caso de la precipitación como era de esperar, la mayor frecuencia / conteo de registros se encuentra entre 0-20 mm de lluvia. 2.5.3 Análisis por años Para entender y explorar aun más los datos, se obtienen los estadísticos descriptivos esta vez para cada año para cada una de las variables en el estudio. # Dataframe años temperatura df_temp_max_ts_year &lt;- df_temp_max_ts df_temp_max_ts_year$year &lt;- year(index(df_temp_max_ts_year)) df_temp_max_ts_year &lt;- as.data.frame(df_temp_max_ts_year) # Dataframe años lluvia df_rain_ts_year &lt;- df_rain_ts df_rain_ts_year$year &lt;- year(index(df_rain_ts_year)) df_rain_ts_year &lt;- as.data.frame(df_rain_ts_year) Primero se aplica summarise para el dataframe de temperatura para cada año: df_temp_max_ts_year %&gt;% group_by(year) %&gt;% summarise( Min_BOG = min(BOG, na.rm = TRUE), Avg_BOG = mean(BOG, na.rm = TRUE), Med_BOG = median(BOG, na.rm = TRUE), Max_BOG = max(BOG, na.rm = TRUE), Min_MED = min(MED, na.rm = TRUE), Avg_MED = mean(MED, na.rm = TRUE), Med_MED = median(MED, na.rm = TRUE), Max_MED = max(MED, na.rm = TRUE), Min_VUP = min(VUP, na.rm = TRUE), Avg_VUP = mean(VUP, na.rm = TRUE), Med_VUP = median(VUP, na.rm = TRUE), Max_VUP = max(VUP, na.rm = TRUE), ) ## # A tibble: 6 × 13 ## year Min_BOG Avg_BOG Med_BOG Max_BOG Min_MED Avg_MED Med_MED Max_MED Min_VUP ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2018 16.2 21.0 21 24.5 22 28.0 28.2 31.8 28 ## 2 2019 Inf NaN NA -Inf 22.6 28.7 28.8 33.6 27.8 ## 3 2020 Inf NaN NA -Inf Inf NaN NA -Inf 32.6 ## 4 2021 Inf NaN NA -Inf 21.4 27.2 27.4 30 Inf ## 5 2022 16.7 20.2 20.2 23 20.6 27.2 27.4 31.1 Inf ## 6 2023 14.2 20.4 20.6 24.2 22.2 28.7 28.8 32.6 31.1 ## # ℹ 3 more variables: Avg_VUP &lt;dbl&gt;, Med_VUP &lt;dbl&gt;, Max_VUP &lt;dbl&gt; # %&gt;% # kable() %&gt;% # kable_styling(full_width = FALSE) df_rain_ts_year %&gt;% group_by(year) %&gt;% summarise( Min_BOG = min(BOG, na.rm = TRUE), Avg_BOG = mean(BOG, na.rm = TRUE), Max_BOG = max(BOG, na.rm = TRUE), Sum_BOG = sum(BOG, na.rm = TRUE), Min_MED = min(MED, na.rm = TRUE), Avg_MED = mean(MED, na.rm = TRUE), Max_MED = max(MED, na.rm = TRUE), Sum_MED = sum(MED, na.rm = TRUE), Min_VUP = min(VUP, na.rm = TRUE), Avg_VUP = mean(VUP, na.rm = TRUE), Max_VUP = max(VUP, na.rm = TRUE), Sum_VUP = sum(VUP, na.rm = TRUE) ) ## # A tibble: 6 × 13 ## year Min_BOG Avg_BOG Max_BOG Sum_BOG Min_MED Avg_MED Max_MED Sum_MED Min_VUP ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2018 0 2.43 32.4 888. 0 4.93 58.5 1799. 0 ## 2 2019 0 0.932 31.9 340 0 1.90 33.9 694. 0 ## 3 2020 0 2.38 42.6 870. 0 1.07 46.2 390. 0 ## 4 2021 0 1.23 31.8 448. 0 2.28 40.0 832. 0 ## 5 2022 0 3.14 48.5 1145. 0 5.62 55.0 2052. 0 ## 6 2023 0 1.99 31.9 273. 0 3.47 39.5 549. 0 ## # ℹ 3 more variables: Avg_VUP &lt;dbl&gt;, Max_VUP &lt;dbl&gt;, Sum_VUP &lt;dbl&gt; Lo anterior, se puede apreciar mejor al realizar visualmente el análisis por años por medio de diagramas de caja / boxplots: # Pivot df year para ggplot df_temp_max_ts_year_pivot &lt;- pivot_longer(df_temp_max_ts_year, cols = c(BOG, MED, VUP), names_to = &quot;Ciudad&quot;, values_to = &quot;Temperatura&quot;) # Boxplots temperatura por ciudad y año ggplot(df_temp_max_ts_year_pivot, aes(x = factor(year), y = Temperatura, fill = Ciudad)) + geom_boxplot() + facet_wrap(~ Ciudad, scales = &quot;free&quot;) + scale_fill_manual(values = city_colors) + labs(title = &quot;Diagrama de cajas de temperaturas máximas por ciudad y año&quot;, x = &quot;Año&quot;, y = &quot;Temperatura [°C]&quot;) + theme_minimal() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) Como se había evidenciado anteriormente, se presentan años completos sin registros: 2019-2021 en Bogotá, 2020 en Medellín y 2021-2022 en Valledupar. # Pivot df year lluvia df_rain_ts_year_pivot &lt;- pivot_longer(df_rain_ts_year, cols = c(BOG, MED, VUP), names_to = &quot;Ciudad&quot;, values_to = &quot;Lluvia&quot;) # Boxplots lluvia por ciudad y año ggplot(df_rain_ts_year_pivot, aes(x = factor(year), y = Lluvia, fill = Ciudad)) + geom_boxplot() + facet_wrap(~ Ciudad, scales = &quot;free&quot;) + scale_fill_manual(values = city_colors) + labs(title = &quot;Diagrama de cajas de precipitaciones por ciudad y año&quot;, x = &quot;Año&quot;, y = &quot;Lluvia [mm]&quot;) + theme_minimal() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) De los diagramas de cajas de precipitación anteriores, se puede observar que el año con mayores registros (milímetros de lluvia diaria) se encuentran en el año 2022 para Bogotá y Valledupar y el 2018 para Medellín (seguido por el 2022). En Valledupar se logra identificar que el año 2022 presenta 4 registros mayores a 600 mm, lo cual no ocurre en ningún otro año en dicha estación (ni en las otras ciudades), por lo tanto es posible que se deban descartar dichos datos en análisis o predicciones futuras de la serie de tiempo. 2.6 Observaciones finales El presente capítulo presenta el análisis exploratorio de las series de tiempo de la temperatura máxima y la precipitación total diaria para tres ciudades capitales de Colombia (Bogotá, Medellín y Valledupar), cada una perteneciente a una zona climática diferente. Es claro en el estudio que las series presentan años completos sin datos (especialmente en la pandemia Covid-19) por lo que será necesario contemplar dichos faltantes en análisis futuros. Referencias ———. 2021. «Banco de Datos del IDEAM - DHIME». http://dhime.ideam.gov.co/atencionciudadano/. "],["preprocesamiento-y-visualización.html", "Capítulo 3 Preprocesamiento y visualización 3.1 Medias móviles 3.2 Descomposición 3.3 Dickey-Fuller Test 3.4 Funciones de autocorrelación (ACF y PACF) 3.5 Rezagos", " Capítulo 3 Preprocesamiento y visualización Parte de las visualizaciones para el conjunto de datos analizados se desarrollaron en el capítulo 02 al crear las series de tiempo (2.3) y especialmente en el análisis exploratorio de datos / EDA (2.5), por lo que para este capítulo se presentan las medias móviles, la descomposición de las series y los rezagos. Con el Conjunto de datos cargados y procesados en el capítulo 2, se procede con los análisis adicionales del presente capítulo. # xts temperatura head(df_temp_max_ts) ## BOG MED VUP ## 2018-01-01 NA 26.3 34.2 ## 2018-01-02 NA 25.6 32.3 ## 2018-01-03 NA 28.7 33.5 ## 2018-01-04 NA 27.4 33.4 ## 2018-01-05 NA 25.8 32.8 ## 2018-01-06 NA 28.0 34.2 # xts precipitación head(df_rain_ts) ## BOG MED VUP ## 2018-01-01 13.8 0.012 0.00 ## 2018-01-02 0.1 26.304 27.97 ## 2018-01-03 2.2 4.774 1.15 ## 2018-01-04 0.0 7.233 0.00 ## 2018-01-05 17.1 3.169 13.21 ## 2018-01-06 0.3 4.862 0.01 3.1 Medias móviles Se inicia graficando las medias móviles semanales y mensuales para las series de temperatura para las tres ciudades analizadas en el estudio: # Serie original plot(df_temp_max_ts, main=&#39;Temperatura máxima diaria&#39;, xlab=&#39;Fecha&#39;, ylab=&#39;Temperatura [°C]&#39;, col=c(&quot;lightblue&quot;, &quot;lightgreen&quot;, &quot;orange&quot;)) legend(&quot;right&quot;, , col = c(&quot;lightblue&quot;, &quot;lightgreen&quot;, &quot;orange&quot;), lty = 1, lwd = 1, legend = c(&quot;BOG&quot;, &quot;MED&quot;, &quot;VUP&quot;)) # Media móvil semanal lines(rollmean(df_temp_max_ts, 7), col=&quot;blue&quot;, lwd=2) # Media móvil mensual lines(rollmean(df_temp_max_ts, 30), col=&quot;red&quot;, lwd=2) En las gráficas anteriores se aprecian las series de tiempo original de temperatura máxima diaria, con las medias móviles semanales en azul oscuro y la mensual en rojo. A pesar de los datos faltantes (posiblemente por pandemia), las medias móviles se calculan y grafican para las tres ciudades en los años iniciales y continuan solamente para Medellín (línea verde claro) y aunque no se nota casi para Valledupar también (línea naranja). Bogotá al contar con la mayor cantidad de datos faltantes no se calcula, ni grafica después de retomarse las mediciones en el año 2023. Ahora se procede con las medias móviles semanales y mensuales de los datos de precipitación: # Serie original plot(df_rain_ts, main=&#39;Precipitación total diaria&#39;, xlab=&#39;Fecha&#39;, ylab=&#39;Lluvia [mm]&#39;, col=c(&quot;lightblue&quot;, &quot;lightgreen&quot;, &quot;orange&quot;)) legend(&quot;bottom&quot;, legend = c(&quot;BOG&quot;, &quot;MED&quot;, &quot;VUP&quot;)) # Media móvil semanal lines(rollmean(df_rain_ts, 7), col=&quot;blue&quot;, lwd=2) # Media móvil mensual lines(rollmean(df_rain_ts, 30), col=&quot;red&quot;, lwd=2) Las medias móviles semanales y mensuales de las series de precipitación se calculan y grafican sin problema, aunque al ser tan cercanas, no alcanzan a diferenciarse, es notorio el salto en marzo 2022 por las lluvias superiores a 700 mm en Valledupar. 3.2 Descomposición En vista de los Datos faltantes en los datasets, especialmente para los registros de temperatura, se procede a realizar la descomposición para el 2022 de precipitación en Bogotá y el 2023 de temperatura en Medellín. # Precipitación total diaria Bogotá 2022 BOG_rain_2022 &lt;- df_rain_ts[&quot;2022&quot;, &quot;BOG&quot;] head(BOG_rain_2022) ## BOG ## 2022-01-01 0.0 ## 2022-01-02 0.0 ## 2022-01-03 0.0 ## 2022-01-04 0.6 ## 2022-01-05 0.0 ## 2022-01-06 0.0 tail(BOG_rain_2022) ## BOG ## 2022-12-26 0.2 ## 2022-12-27 0.0 ## 2022-12-28 0.1 ## 2022-12-29 0.1 ## 2022-12-30 0.2 ## 2022-12-31 0.3 colSums(is.na(BOG_rain_2022)) ## BOG ## 0 # Temperatura máxima diaria Medellín 2023 MED_temp_2023 &lt;- df_temp_max_ts[&quot;2023&quot;, &quot;MED&quot;] head(MED_temp_2023) ## MED ## 2023-01-01 26.8 ## 2023-01-02 27.9 ## 2023-01-03 22.5 ## 2023-01-04 27.5 ## 2023-01-05 25.6 ## 2023-01-06 26.4 tail(MED_temp_2023) ## MED ## 2023-12-26 28.0 ## 2023-12-27 29.2 ## 2023-12-28 26.2 ## 2023-12-29 26.9 ## 2023-12-30 28.2 ## 2023-12-31 29.4 colSums(is.na(MED_temp_2023)) ## MED ## 0 Se procede a realizar la descomposición en las series con frecuencias mensuales (30 días), tanto para la lluvia en Bogotá y la temperatura en Medellín. # Decompose Lluvia attr(BOG_rain_2022, &#39;frequency&#39;) &lt;- 30 plot(decompose(as.ts(BOG_rain_2022))) De la gráfica de tendencia se aprecia claramente que los mayores registros de precipitación se encuentran entre marzo y mayo (meses 3 y 5) y nuevamente se presentan altas lluvias entre septiembre y noviembre (meses 9-11), lo cual evidencia como en todo el país un ciclo de lluvias bimodal. # Decompose temperatura attr(MED_temp_2023, &#39;frequency&#39;) &lt;- 30 plot(decompose(as.ts(MED_temp_2023))) autoplot(stl(MED_temp_2023, s.window = &quot;periodic&quot;)) Como se puede apreciar en las gráficas anteriores para la temperatura, se obtienen los mismos resultados usando decompose y plot y stl y autplot. En Medellín, las mayores temperaturas se presentan en los meses de mitad de año (lo meses que seguramente llueven menos), especialmente en agosto (mes 8). Las tendencias mensuales anteriores encontradas por descomposición corresponden a identificado por el (IDEAM - Instituto de Hidrología, Meteorología y Estudios Ambientales 2012) para las características climatológicas de ciudades principales y municipios turísticos como Bogotá y Medellín. 3.3 Dickey-Fuller Test Se aplica la función adf.test para verificar si las series seleccionadas son estacionarias: # ADF lluvia adf.test(as.ts(BOG_rain_2022), alternative = &quot;stationary&quot;) ## ## Augmented Dickey-Fuller Test ## ## data: as.ts(BOG_rain_2022) ## Dickey-Fuller = -5.0401, Lag order = 7, p-value = 0.01 ## alternative hypothesis: stationary # ADF temperatura adf.test(as.ts(MED_temp_2023), alternative = &quot;stationary&quot;) ## ## Augmented Dickey-Fuller Test ## ## data: as.ts(MED_temp_2023) ## Dickey-Fuller = -4.2854, Lag order = 7, p-value = 0.01 ## alternative hypothesis: stationary Tal como se ve en el material de la Unidad 3, si el valor \\(p\\) es menor que \\(0.05\\) las series son estacionarias, en este caso evidentemente, la lluvia y temperatura diaria son estacionarias. Pensando en un nivel de significancia del \\(5\\%\\) De todos modos se verifica con ndiffs: # NDIFF lluvia ndiffs(as.ts(BOG_rain_2022)) ## [1] 0 # NDIFF temperatura ndiffs(as.ts(MED_temp_2023)) ## [1] 1 Encontramos que ndiffs nos da \\(1\\) para la serie de temperatura en Medellín por lo que aplicamos diff: MED_temp_2023_diff &lt;- diff(as.ts(MED_temp_2023)) plot(MED_temp_2023_diff, main=&quot;Diferencia de temperatura máxima diaria en Medellín 2023&quot;, ylab=&quot;Diferencia de temperatura&quot;, xlab=&quot;Tiempo&quot;, col=&quot;lightgreen&quot;) Volvemos a verificar con adf adf.test(MED_temp_2023_diff) ## Warning in adf.test(MED_temp_2023_diff): p-value smaller than printed p-value ## ## Augmented Dickey-Fuller Test ## ## data: MED_temp_2023_diff ## Dickey-Fuller = -10.091, Lag order = 7, p-value = 0.01 ## alternative hypothesis: stationary 3.4 Funciones de autocorrelación (ACF y PACF) Ahora se aplican las funciones de autocorrelación acf () y pacf () a las series seleccionados de precipitación y temperaturas diarias: # ACF y PACF Lluvia acf(BOG_rain_2022) pacf(BOG_rain_2022) # ACF y PACF temperatura acf(MED_temp_2023_diff) pacf(MED_temp_2023_diff) Los anteriores resultados se estudiarán en mayor profundidad al ver modelos AR / ARIMA. 3.5 Rezagos Por último se generan las gráficas de rezagos: # Rezagos Lluvia lag.plot(BOG_rain_2022, lags = 12, do.lines = FALSE) # Rezagos Temperatura lag.plot(MED_temp_2023, lags = 12, do.lines = FALSE) Referencias IDEAM - Instituto de Hidrología, Meteorología y Estudios Ambientales. 2012. «Características climatológicas de ciudades principales y municipios turisticos». http://www.ideam.gov.co/web/entidad/acerca-entidad. "],["introducción-modelos-pronóstico.html", "Capítulo 4 Introducción modelos pronóstico 4.1 Tendencias y ciclos 4.2 Modelo Holt-Winters 4.3 Predicciones iniciales", " Capítulo 4 Introducción modelos pronóstico En el presente capítulo se aplica la metodología Holt-Winter y de suavizamiento a las series de tiempo estudiadas en el documento. Con los datasets procesados en los capítulos 2 Conjunto de datos y 3 Preprocesamiento y visualización, se procede con los análisis en mención. 4.1 Tendencias y ciclos Se seleccionaron las series con más años de datos, por lo que se analizarán la precipitación total diaria de Bogotá entre los años 2018 y 2019 y la temperatura máxima diaria de Medellín entre 2022 y 2023. A continuación se presenta la descripción inicial de los datos, la clase de los objetos creados, el inicio y fin, su frecuencia, así como la cantidad de NA y un resumen estadístico para cada serie. # Serie xts Precipitación total diaria Bogotá 2018-2019 BOG_rain_2018_2019 &lt;- df_rain_ts[&quot;2018/2019&quot;, &quot;BOG&quot;] str(BOG_rain_2018_2019) ## An xts object on 2018-01-01 / 2019-12-31 containing: ## Data: double [730, 1] ## Columns: BOG ## Index: Date [730] (TZ: &quot;UTC&quot;) class(BOG_rain_2018_2019) ## [1] &quot;xts&quot; &quot;zoo&quot; start(BOG_rain_2018_2019) ## [1] &quot;2018-01-01&quot; end(BOG_rain_2018_2019) ## [1] &quot;2019-12-31&quot; frequency(BOG_rain_2018_2019) ## [1] 1 colSums(is.na(BOG_rain_2018_2019)) ## BOG ## 0 # Serie ts Precipitación total diaria Bogotá 2018-2019 BOG_rain_2018_2019_ts &lt;- as.ts(BOG_rain_2018_2019) class(BOG_rain_2018_2019_ts) ## [1] &quot;ts&quot; str(BOG_rain_2018_2019_ts) ## Time-Series [1:730] from 1 to 730: 13.8 0.1 2.2 0 17.1 0.3 0.1 0 5.6 8.8 ... summary(BOG_rain_2018_2019_ts) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.000 0.000 0.000 1.683 0.975 32.400 # Serie xts Temperatura máxima diaria Medellín 2022-2023 MED_temp_2022_2023 &lt;- df_temp_max_ts[&quot;2022/2023&quot;, &quot;MED&quot;] str(MED_temp_2022_2023) ## An xts object on 2022-01-01 / 2023-12-31 containing: ## Data: double [730, 1] ## Columns: MED ## Index: Date [730] (TZ: &quot;UTC&quot;) class(MED_temp_2022_2023) ## [1] &quot;xts&quot; &quot;zoo&quot; start(MED_temp_2022_2023) ## [1] &quot;2022-01-01&quot; end(MED_temp_2022_2023) ## [1] &quot;2023-12-31&quot; frequency(MED_temp_2022_2023) ## [1] 1 colSums(is.na(MED_temp_2022_2023)) ## MED ## 0 # Serie ts Temperatura máxima diaria Medellín 2022-2023 MED_temp_2022_2023_ts &lt;- as.ts(MED_temp_2022_2023) class(MED_temp_2022_2023_ts) ## [1] &quot;ts&quot; str(MED_temp_2022_2023_ts) ## Time-Series [1:730] from 1 to 730: 27.4 26.4 27.8 28 28.2 26 25 26.8 27.4 24.6 ... summary(MED_temp_2022_2023_ts) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 20.60 26.50 28.00 27.93 29.40 32.60 Primero se procede a graficar con plot el comportamiento de la serie de tiempo / xts para las variables seleccionadas: # Plot xts Precipitación Bogotá plot(BOG_rain_2018_2019, main=&#39;Precipitación total diaria Bogotá 2018-2019&#39;, xlab=&#39;Fecha&#39;, ylab=&#39;Lluvia [mm]&#39;, col=&quot;lightblue&quot;) Aunque anteriormente no se encontraron datos faltantes / NA en el conjunto de datos seleccionados para la precipitación, de la anterior gráfica se nota claramente, que entre marzo (mes 3) y agosto (mes 8) de 2019 se presentan registros seguidos sin precipitación (0 mm), aunque es de esperar que no llueva todos los días del año en Bogotá, no tiene sentido que se presenten cinco meses continuos sin registros de lluvia. Los datos anteriores permiten inferir que el sensor / pluviómetro posiblemente presentó fallas en dichos meses, por lo que se procede a revisar los datos en el dataframe y se encuentra que contiene ceros con un “formato diferente” (int 0 vs dbl 0.0) en el periodo en mención1, lo cual es indicador de una falta de validación de los datos entre finales de marzo e inicios de agosto de 2019, por lo que en dichos meses se debe ser prudente con dichos registros y si es necesario descartarlos o no tenerlos en cuenta en el análisis por atípicos / inválidos. Caso contrario se evidencia en la figura siguiente que presenta la tendencia de la temperatura máxima diaria en Medellín y en la cual se observa fácilmente que no encuentran datos por fuera del rango de 20 a 33 ºC, que es lo esperado para dicha variable e indica consistencia en la medición y ausencia de valores extremos o datos atípicos fuera de ese rango. Esto sugiere una buena calidad de los datos y confiabilidad en las mediciones de temperatura en la estación durante el período analizado. # Plot xts Temperatura Medellín plot(MED_temp_2022_2023, main=&quot;Temperatura máxima diaria Medellín 2022-2023&quot;, xlab=&#39;Fecha&#39;, ylab=&#39;Temperatura [°C]&#39;, col=&quot;lightgreen&quot;) Ahora con lm obtenemos la tendencia tanto para las series / ts para la precipitación y para la temperatura: # Tendencia precipitación Bogotá plot(BOG_rain_2018_2019_ts, main=&#39;Tendencia Precipitación total diaria Bogotá 2018-2019&#39;, xlab=&#39;Tiempo / Día&#39;, ylab=&#39;Lluvia [mm]&#39;, col=&quot;lightblue&quot;) abline(reg=lm(BOG_rain_2018_2019_ts~time(BOG_rain_2018_2019_ts))) Se observa en la figura anterior una tendencia de la precipitación en Medellín que decrece desde cerca de los 4 mm de lluvia en enero de 2018 (t=0) a prácticamente 0 mm en diciembre de 2019 (t=730). Mientras que en la figura siguiente para la temperatura se aprecia una tendencia que aumenta cerca de dos grados desde de aproximadamente 26.5 ºC en t0 a 29 ºC en t730 en los años analizados. # Tendencia temperatura Medellín plot(MED_temp_2022_2023_ts, main=&quot;Tendencia Temperatura máxima diaria Medellín&quot;, xlab=&#39;Tiempo / Día&#39;, ylab=&#39;Temperatura [°C]&#39;, col=&quot;lightgreen&quot;) abline(reg=lm(MED_temp_2022_2023_ts~time(MED_temp_2022_2023_ts))) A continuación se presenta un resumen de los datos y se analizan las tendencias mensuales de la precipitación (la lluvia se suma para obtener los mm acumulados por mes) y la temperatura (se promedian los valores mensuales): # Precipitación total acumulada mensual BOG_rain_2018_2019_monthly &lt;- apply.monthly(BOG_rain_2018_2019, FUN=sum) str(BOG_rain_2018_2019_monthly) ## An xts object on 2018-01-31 / 2019-12-31 containing: ## Data: double [24, 1] ## Columns: BOG ## Index: Date [24] (TZ: &quot;UTC&quot;) summary(BOG_rain_2018_2019_monthly) ## Index BOG ## Min. :2018-01-31 Min. : 0.00 ## 1st Qu.:2018-07-23 1st Qu.: 23.32 ## Median :2019-01-15 Median : 45.00 ## Mean :2019-01-14 Mean : 51.18 ## 3rd Qu.:2019-07-07 3rd Qu.: 63.20 ## Max. :2019-12-31 Max. :199.70 # Serie ts precipitación mensual BOG_rain_2018_2019_monthly_ts &lt;- ts(BOG_rain_2018_2019_monthly, start=c(2018, 1), frequency=12) # Tendencia precipitación acumulada mensual Bogotá plot(BOG_rain_2018_2019_monthly_ts, main=&#39;Tendencia Precipitación total acumulada mensual Bogotá 2018-2019&#39;, xlab=&#39;Tiempo / Mes&#39;, ylab=&#39;Lluvia [mm]&#39;, col=&quot;lightblue&quot;) abline(reg=lm(BOG_rain_2018_2019_monthly_ts~time(BOG_rain_2018_2019_monthly_ts))) En la figura anterior se confirma que con los datos de abril, mayo, junio y julio de 2019 en el dataset se obtienen precipitaciones mensuales de cero milímetros, por lo que dichos meses se asumen como no válidos debido a fallas en el equipo de medición. En la figura siguiente se presenta la tendencia de la temperatura máxima promedio mensual que presenta como era de esperar una línea creciente de aproximadamente de 26.5 a 29 ºC. # Temperatura máxima promedio mensual MED_temp_2022_2023_monthly &lt;- apply.monthly(MED_temp_2022_2023, FUN=mean) str(MED_temp_2022_2023_monthly) ## An xts object on 2022-01-31 / 2023-12-31 containing: ## Data: double [24, 1] ## Columns: MED ## Index: Date [24] (TZ: &quot;UTC&quot;) summary(MED_temp_2022_2023_monthly) ## Index MED ## Min. :2022-01-31 Min. :26.04 ## 1st Qu.:2022-07-23 1st Qu.:27.14 ## Median :2023-01-15 Median :27.57 ## Mean :2023-01-14 Mean :27.92 ## 3rd Qu.:2023-07-07 3rd Qu.:28.67 ## Max. :2023-12-31 Max. :30.39 # Serie ts temperatura mensual MED_temp_2022_2023_monthly_ts &lt;- ts(MED_temp_2022_2023_monthly, start=c(2022, 1), frequency=12) # Tendencia temperatura promedio mensual Medellín plot(MED_temp_2022_2023_monthly_ts, main=&quot;Tendencia Temp. máxima promedio mensual Medellín 2022-2023&quot;, xlab=&#39;Tiempo / Mes&#39;, ylab=&#39;Temperatura [°C]&#39;, col=&quot;lightgreen&quot;) abline(reg=lm(MED_temp_2022_2023_monthly_ts~time(MED_temp_2022_2023_monthly_ts))) A continuación obtenemos el ciclo mensual para cada una de las variables estudiadas en las ciudades seleccionadas y se grafica con aggregate. # Ciclo lluvia Bogotá cycle(BOG_rain_2018_2019_monthly_ts) ## Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec ## 2018 1 2 3 4 5 6 7 8 9 10 11 12 ## 2019 1 2 3 4 5 6 7 8 9 10 11 12 plot(aggregate(BOG_rain_2018_2019_monthly_ts, FUN=mean), main=&#39;Tendencia aggregate Precip. acumulada mensual Bogotá 2018-2019&#39;, xlab=&#39;Tiempo / Mes&#39;, ylab=&#39;Lluvia [mm]&#39;) Tanto en la gráfica anterior, como en la siguiente, en ambos casos se obtienen las mismas tendencias para la precipitación y la temperatura que las encontradas anteriormente con abline y la regresión lineal con lm. # Ciclo temperatura Medellín cycle(MED_temp_2022_2023_monthly_ts) ## Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec ## 2022 1 2 3 4 5 6 7 8 9 10 11 12 ## 2023 1 2 3 4 5 6 7 8 9 10 11 12 plot(aggregate(MED_temp_2022_2023_monthly_ts, FUN=mean), main=&quot;Tendencia aggregate Temp. máxima mensual Medellín 2022-2023&quot;, xlab=&#39;Tiempo / Mes&#39;, ylab=&#39;Temperatura [°C]&#39;,) Ahora se presenta la dispersión / comportamiento mensual por medio de boxplots tanto para las precipitaciones en Bogotá, así como para las temperaturas en Medellín: # Boxpplot lluvia mensual Bogotá boxplot(BOG_rain_2018_2019_monthly_ts~cycle(BOG_rain_2018_2019_monthly_ts), main=&quot;Dispersión Precipitación total acumulada mensual Bogotá 2018-2019&quot;, xlab=&#39;Mes&#39;, ylab=&#39;Lluvia [mm]&#39;, col=&quot;lightblue&quot;) # Boxplot temperatura mensual Medellín boxplot(MED_temp_2022_2023_monthly_ts~cycle(MED_temp_2022_2023_monthly_ts), main=&quot;Dispersión Temperatura máxima mensual Medellín 2022-2023&quot;, xlab=&#39;Mes&#39;, ylab=&#39;Temperatura [°C]&#39;, col=&quot;lightgreen&quot;) Tal como se refiere en los materiales de la unidad, se procede a probar la función logaritmo2 para graficar nuevamente los datos de temperatura y evidenciar si se obtiene alguna mejora en la visualización de las series diarias y mensuales. # Logaritmo temperatura Medellín plot(log(MED_temp_2022_2023), main=&quot;Logaritmo Temperatura máxima diaria Medellín&quot;, xlab=&#39;Fecha&#39;, ylab=&#39;Temperatura [°C]&#39;, col=&quot;lightgreen&quot;) # Logaritmo temperatura mensual Medellín plot(log(MED_temp_2022_2023_monthly_ts), main=&#39;Logaritmo Temp. máxima promedio mensual Medellín 2022-2023&#39;, xlab=&#39;Tiempo / Mes&#39;, ylab=&#39;log(Temperatura [°C])&#39;, col=&quot;lightblue&quot;) En las gráficas anteriores no se observa cambio significativo en los comportamientos / tendencias de las series de temperatura, más allá de los valores / órdenes de magnitud obtenidos al aplicar logaritmo. 4.2 Modelo Holt-Winters Ahora, se aplica el modelo Holt-Winters para la serie mensual de temperatura en Medellín. Esta metodología requiere indicar los siguientes parámetros: 1) alfa, que el parámetro de suavizado del nivel, 2) beta el parámetro de suavizado para la tendencia, 3) gamma el parámetro de suavizado para la estacionalidad, 4) tipo de estacionalidad. Como se observo en el capitulo anterior, la prueba de Dickey-Fuller rechazó la hipótesis nula, indicando una estacionalidad aditiva la cual sera empleada en el método Holt-Winters, sin embargo los otros parámetros deben ser optimizados, este procedimiento es realizado por la función HoltWinters de manera automática o puede ser ejecutado externamente empleando optim y definiendo la métrica de error que se desee evaluar, en este capítulo se realizan ambos métodos. # Holt Winters temperatura mensual Medellín MED_temp_2022_2023_monthly_HW &lt;- HoltWinters(MED_temp_2022_2023_monthly_ts, seasonal = &quot;additive&quot;) plot(MED_temp_2022_2023_monthly_HW, main=&#39;Ajuste Holt-Winters Temp. Max. promedio mensual Medellín 2022-2023&#39;, xlab=&#39;Tiempo / Mes&#39;, ylab=&#39;Temperatura [C]&#39;, col=&quot;lightgreen&quot;) Los parámetros para la temperatura empleados por el modelo Holt-winters de manera automática fueron los siguientes: cat(&quot;alpha: &quot;, MED_temp_2022_2023_monthly_HW$alpha, &quot; beta: &quot;, MED_temp_2022_2023_monthly_HW$beta, &quot; gamma: &quot;, MED_temp_2022_2023_monthly_HW$gamma) ## alpha: 0.2369436 beta: 0.07256704 gamma: 0.1 A continuación se ejecuta el modelo Holt-Winters buscando un nuevo set de parámetros buscados mediante una optimización teniendo en cuenta como función objetivo el Error de Porcentaje Medio Absoluto (MAPE), con el fin de evaluar si hay un cambio drástico frente a la metodología automática. # Función error MAPE error_function &lt;- function(params) { alpha &lt;- params[1] beta &lt;- params[2] gamma &lt;- params[3] hw_fit &lt;- HoltWinters(MED_temp_2022_2023_monthly_ts, alpha = alpha, beta = beta, gamma = gamma) abs_percent_errors &lt;- abs(residuals(hw_fit) / MED_temp_2022_2023_monthly_ts) mape &lt;- mean(abs_percent_errors, na.rm = TRUE) * 100 return(mape) } # Optimización parámetros initial_params &lt;- c(0.2, 0.2, 0.2) optimized_params &lt;- optim(initial_params, error_function)$par cat(&quot;alpha: &quot;, optimized_params[1], &quot; beta: &quot;, optimized_params[2], &quot; gamma: &quot;, optimized_params[3]) ## alpha: 0.3516182 beta: 0.2725255 gamma: 0.118212 # Modelo óptimo MED_temp_2022_2023_monthly_HW_optimal &lt;- HoltWinters(MED_temp_2022_2023_monthly_ts, alpha = optimized_params[1], beta = optimized_params[2], gamma = optimized_params[3]) plot(MED_temp_2022_2023_monthly_HW_optimal, main=&#39;Segundo Ajuste Holt-Winters Temp. Max. promedio mensual Medellín&#39;, xlab=&#39;Tiempo / Mes&#39;, ylab=&#39;Temperatura [°C]&#39;, col=&quot;lightgreen&quot;) Se observa que el modelo 1 el cual usa los parámetros obtenidos automáticamente versus el segundo modelo que obtuvo los parámetros con una función de error diferente, MAPE, presentan una muy baja diferencia entre ellos, lo cual puede deberse a el bajo número de datos, 24 registros. A continuación se presentan la descomposición para el modelo original/automático obtenido anteriormente: # Descomposición Holt Winters log temperatura Medellín plot(fitted(MED_temp_2022_2023_monthly_HW), main=&#39;Descomposicion con Holt-Winters Temp. máx. promedio mensual Medellín&#39;, xlab=&#39;Tiempo / Mes&#39;, ylab=&#39;Temperatura [°C])&#39;, col=&quot;lightgreen&quot;) 4.3 Predicciones iniciales Ahora que contamos con los modelos Holt Winters (HW) aplicados a la series mensuales de temperatura en Medellín, se procede a realizar unas predicciones iniciales para seis meses. # Predicción Holt Winters temperatura Medellín MED_temp_2022_2023_monthly_Pred &lt;- predict(MED_temp_2022_2023_monthly_HW, 6, prediction.interval = TRUE) MED_temp_2022_2023_monthly_Pred ## fit upr lwr ## Jan 2024 29.29153 30.79737 27.78569 ## Feb 2024 30.39437 31.94807 28.84066 ## Mar 2024 29.12354 30.73007 27.51701 ## Apr 2024 29.68363 31.34787 28.01939 ## May 2024 31.32207 33.04881 29.59533 ## Jun 2024 31.27666 33.07057 29.48276 # Predicción modelo optimizado temperatura Medellín MED_temp_2022_2023_monthly_Pred2 &lt;- predict(MED_temp_2022_2023_monthly_HW_optimal, 6, prediction.interval = TRUE) MED_temp_2022_2023_monthly_Pred2 ## fit upr lwr ## Jan 2024 29.21094 30.86264 27.55924 ## Feb 2024 30.24939 32.05889 28.43988 ## Mar 2024 28.91671 30.93649 26.89694 ## Apr 2024 29.41702 31.69600 27.13804 ## May 2024 30.99904 33.58114 28.41695 ## Jun 2024 30.90072 33.82475 27.97668 A continuación se observa el delta entre la predicción de ambos modelos, en este caso se observan ligeras diferencias entre ambos tanto en su predicción como en sus límites superior e inferior, mostrando que el segundo modelo tiende a predecir valores más bajos que el original debido a los parámetros de suavizado empleados son más altos en el primer modelo. Esto se debe a que parámetros más altos tienden a capturar las tendencias más recientes por ende resultando en datos de temperatura ligeramente más bajos en el segundo modelo. # Diferencia predicciones MED_temp_2022_2023_monthly_Pred-MED_temp_2022_2023_monthly_Pred2 ## MED_temp_2022_2023_monthly_Pred.fit ## Jan 2024 0.08058729 ## Feb 2024 0.14498089 ## Mar 2024 0.20682333 ## Apr 2024 0.26661345 ## May 2024 0.32302819 ## Jun 2024 0.37594672 ## MED_temp_2022_2023_monthly_Pred.upr ## Jan 2024 -0.06527701 ## Feb 2024 -0.11081771 ## Mar 2024 -0.20641898 ## Apr 2024 -0.34812350 ## May 2024 -0.53232425 ## Jun 2024 -0.75418544 ## MED_temp_2022_2023_monthly_Pred.lwr ## Jan 2024 0.2264516 ## Feb 2024 0.4007795 ## Mar 2024 0.6200656 ## Apr 2024 0.8813504 ## May 2024 1.1783806 ## Jun 2024 1.5060789 Ahora se grafican las predicciones encontradas tanto con el modelo HW automático / original y el segundo con parámetros optimizados: # Gráfico Predicción Holt Winters log temperatura Medellín plot(MED_temp_2022_2023_monthly_HW, MED_temp_2022_2023_monthly_Pred, main=&#39;Predicción Modelo 1 HW Temp. Máx. promedio mensual Medellín&#39;, xlab=&#39;Tiempo / Mes&#39;, ylab=&#39;Temperatura [°C])&#39;, col=c(&quot;lightgreen&quot;, &quot;green&quot;)) # Gráfico Predicción Holt Winters log temperatura Medellín plot(MED_temp_2022_2023_monthly_HW_optimal, MED_temp_2022_2023_monthly_Pred2, main=&#39;Predicción Modelo 2 HW Temp. Máx. promedio mensual Medellín&#39;, xlab=&#39;Tiempo / Mes&#39;, ylab=&#39;Temperatura [°C])&#39;, col=c(&quot;lightgreen&quot;, &quot;green&quot;)) Las predicciones encontradas con Holt-Winters siguen una tendencia creciente de la temperatura máxima mensual y parece no tener en cuenta el ciclo climático, pero es una primera aproximación que como todo pronóstico se debe analizar en profundidad y tener claro los datos usados para generar predicciones futuras. Independiente de las predicciones obtenidas, es importante tener en cuenta las limitaciones del modelo de Holt-Winters. Una de las principales limitaciones es la característica multiplicativa de la estacionalidad. Cuando hay períodos con valores muy bajos, como puede ser el caso en datos de temperatura, la estacionalidad puede comportarse de manera inesperada debido a las diferencias relativas significativas. Por lo tanto, aunque Holt-Winters es una técnica efectiva para el pronóstico, es necesario considerar estas limitaciones y realizar análisis adicionales para una comprensión más completa del comportamiento de los datos. Los registros continuos de “ceros” van exactamente desde 2019-03-19 hasta 2019-08-07.↩︎ Debido a la presencia de ceros en los datos de precipitación no se aplica el logaritmo a dicha variable para evitar resultados infinitos / INF.↩︎ "],["referencias.html", "Referencias", " Referencias IDEAM - Instituto de Hidrología, Meteorología y Estudios Ambientales. 2012. «Características climatológicas de ciudades principales y municipios turisticos». http://www.ideam.gov.co/web/entidad/acerca-entidad. ———. 2021. «Banco de Datos del IDEAM - DHIME». http://dhime.ideam.gov.co/atencionciudadano/. ———. 2024. «Acerca de la Entidad». http://www.ideam.gov.co/web/entidad/acerca-entidad. MINTIC - Ministerio de Tecnologías de la Información y las Comunicaciones. 2024. «Datos Abiertos Colombia». la plataforma de datos abiertos del gobierno colombiano. https://www.datos.gov.co/. OMM - Organización Meteorológica Mundial. 2024. «Día Meteorológico Mundial de 2024». Organización Meteorológica Mundial. https://wmo.int/es/site/dia-meteorologico-mundial-de-2024. OMS - Organización Mundial de la Salud. 2021. «Cambio climático». https://www.who.int/es/news-room/fact-sheets/detail/climate-change-and-health. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
